{"title":"JUC","slug":"JUC","date":"2023-03-07T03:23:12.955Z","updated":"2023-03-07T03:28:58.911Z","comments":true,"path":"api/articles/JUC.json","photos":[],"link":"","excerpt":"JUC一、创建线程1.1直接使用 Thread1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>// 构造方法的参数是给线程指定名字，推荐<br>Thread t1 = new Thread(&quot;t1&quot;) &#123;<br> @Override<br> // run 方法内实现了要执行的任务<br> public void run() &#123;<br> log.debug(&quot;hello&quot;);<br> &#125;<br>&#125;;<br>t1.start();<br>1.2使用 Runnable 配合 Thread1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>// 创建任务对象<br>Runnable task2 = new Runnable() &#123;<br>     @Override<br>     public void run() &#123;<br>     \tlog.debug(&quot;hello&quot;);<br>     &#125;<br>&#125;;<br>// 参数1 是任务对象; 参数2 是线程名字，推荐<br>Thread t2 = new Thread(task2, &quot;t2&quot;);<br>t2.start();<br>1.3FutureTask 配合 Thread1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>// 创建任务对象<br>FutureTask&lt;Integer&gt; task3 = new FutureTask&lt;&gt;(() -&gt; &#123;<br>log.debug(&quot;hello&quot;);<br>return 100;<br>&#125;);<br>// 参数1 是任务对象; 参数2 是线程名字，推荐<br>new Thread(task3, &quot;t3&quot;).start();<br>// 主线程阻塞，同步等待 task 执行完毕的结果<br>Integer result = task3.get();<br>log.debug(&quot;结果是:&#123;&#125;&quot;, result);<br>","covers":["/2023/03/07/JUC/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81%E6%8F%8F%E8%BF%B0.png","/2023/03/07/JUC/JavaAPI%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81%E6%8F%8F%E8%BF%B0.png","/2023/03/07/JUC/monitor%E7%BB%93%E6%9E%84.png","/2023/03/07/JUC/%E6%99%AE%E9%80%9A%E5%AF%B9%E8%B1%A1.png","/2023/03/07/JUC/%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1.png","/2023/03/07/JUC/%E8%BD%BB%E9%87%8F%E7%BA%A7%E9%94%81.png","/2023/03/07/JUC/%E9%94%81%E8%86%A8%E8%83%801-1.png","/2023/03/07/JUC/%E9%94%81%E8%86%A8%E8%83%801-2.png","/2023/03/07/JUC/%E8%87%AA%E6%97%8B%E4%BC%98%E5%8C%96.png","/2023/03/07/JUC/%E4%B8%8D%E5%8F%AF%E8%A7%81.png","/JUC/Cell%E4%BC%AA%E5%85%B1%E4%BA%AB.png","/JUC/add%E6%B5%81%E7%A8%8B%E5%9B%BE.png","/JUC/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BA%BF%E7%A8%8B%E6%B1%A0.png","/2023/03/07/JUC/JDK-ExecutorService.png","/2023/03/07/JUC/RejectedExecutionHandler.png","/2023/03/07/JUC/Tomcat-Conector.png","/2023/03/07/JUC/Tomcat-%E4%B8%8D%E4%B8%80%E6%A0%B7%E7%9A%84%E6%95%91%E6%80%A5%E7%BA%BF%E7%A8%8B%E5%88%9B%E5%BB%BA.png"],"content":"<h3 id=\"JUC\"><a href=\"#JUC\" class=\"headerlink\" title=\"JUC\"></a>JUC</h3><hr>\n<h4 id=\"一、创建线程\"><a href=\"#一、创建线程\" class=\"headerlink\" title=\"一、创建线程\"></a>一、创建线程</h4><h5 id=\"1-1直接使用-Thread\"><a href=\"#1-1直接使用-Thread\" class=\"headerlink\" title=\"1.1直接使用 Thread\"></a>1.1直接使用 Thread</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 构造方法的参数是给线程指定名字，推荐</span></span><br><span class=\"line\"><span class=\"type\">Thread</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(<span class=\"string\">&quot;t1&quot;</span>) &#123;</span><br><span class=\"line\"> <span class=\"meta\">@Override</span></span><br><span class=\"line\"> <span class=\"comment\">// run 方法内实现了要执行的任务</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"> log.debug(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">t1.start();</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"1-2使用-Runnable-配合-Thread\"><a href=\"#1-2使用-Runnable-配合-Thread\" class=\"headerlink\" title=\"1.2使用 Runnable 配合 Thread\"></a>1.2使用 Runnable 配合 Thread</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建任务对象</span></span><br><span class=\"line\"><span class=\"type\">Runnable</span> <span class=\"variable\">task2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Runnable</span>() &#123;</span><br><span class=\"line\">     <span class=\"meta\">@Override</span></span><br><span class=\"line\">     <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">     \tlog.debug(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 参数1 是任务对象; 参数2 是线程名字，推荐</span></span><br><span class=\"line\"><span class=\"type\">Thread</span> <span class=\"variable\">t2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(task2, <span class=\"string\">&quot;t2&quot;</span>);</span><br><span class=\"line\">t2.start();</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"1-3FutureTask-配合-Thread\"><a href=\"#1-3FutureTask-配合-Thread\" class=\"headerlink\" title=\"1.3FutureTask 配合 Thread\"></a>1.3FutureTask 配合 Thread</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建任务对象</span></span><br><span class=\"line\">FutureTask&lt;Integer&gt; task3 = <span class=\"keyword\">new</span> <span class=\"title class_\">FutureTask</span>&lt;&gt;(() -&gt; &#123;</span><br><span class=\"line\">log.debug(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">100</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 参数1 是任务对象; 参数2 是线程名字，推荐</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(task3, <span class=\"string\">&quot;t3&quot;</span>).start();</span><br><span class=\"line\"><span class=\"comment\">// 主线程阻塞，同步等待 task 执行完毕的结果</span></span><br><span class=\"line\"><span class=\"type\">Integer</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> task3.get();</span><br><span class=\"line\">log.debug(<span class=\"string\">&quot;结果是:&#123;&#125;&quot;</span>, result);</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h4 id=\"二、查看线程方法\"><a href=\"#二、查看线程方法\" class=\"headerlink\" title=\"二、查看线程方法\"></a>二、查看线程方法</h4><h5 id=\"2-1windows\"><a href=\"#2-1windows\" class=\"headerlink\" title=\"2.1windows\"></a>2.1windows</h5><ul>\n<li><p>任务管理器可以查看进程和线程数，也可以用来杀死进程 </p>\n</li>\n<li><p>tasklist 查看进程 </p>\n</li>\n<li><p>taskkill 杀死进程</p>\n</li>\n</ul>\n<h5 id=\"2-2linux\"><a href=\"#2-2linux\" class=\"headerlink\" title=\"2.2linux\"></a>2.2linux</h5><ul>\n<li><p>ps -fe 查看所有进程 </p>\n</li>\n<li><p>ps -fT -p  <PID>查看某个进程（PID）的所有线程 </PID></p>\n</li>\n<li><p>kill 杀死进程 </p>\n</li>\n<li><p>top 按大写 H 切换是否显示线程 </p>\n</li>\n<li><p>top -H -p  <PID>查看某个进程（PID）的所有线程</PID></p>\n</li>\n</ul>\n<h5 id=\"2-3Java\"><a href=\"#2-3Java\" class=\"headerlink\" title=\"2.3Java\"></a>2.3Java</h5><ul>\n<li><p>jps 命令查看所有 Java 进程 </p>\n</li>\n<li><p>jstack  查看某个 Java 进程（PID）的所有线程状态 </p>\n</li>\n<li><p>jconsole 来查看某个 Java 进程中线程的运行情况（图形界面）</p>\n</li>\n</ul>\n<h4 id=\"三、线程上下文切换（Thread-Context-Switch）\"><a href=\"#三、线程上下文切换（Thread-Context-Switch）\" class=\"headerlink\" title=\"三、线程上下文切换（Thread Context Switch）\"></a>三、线程上下文切换（Thread Context Switch）</h4><h5 id=\"3-1上线文切换原因\"><a href=\"#3-1上线文切换原因\" class=\"headerlink\" title=\"3.1上线文切换原因\"></a>3.1上线文切换原因</h5><ul>\n<li><p>线程的 cpu 时间片用完 </p>\n</li>\n<li><p>垃圾回收 </p>\n</li>\n<li><p>有更高优先级的线程需要运行 </p>\n</li>\n<li><p>线程自己调用了 sleep、yield、wait、join、park、synchronized、lock 等方法</p>\n</li>\n</ul>\n<h5 id=\"3-2Context-Switch-发生时\"><a href=\"#3-2Context-Switch-发生时\" class=\"headerlink\" title=\"3.2Context Switch 发生时\"></a>3.2Context Switch 发生时</h5><ul>\n<li><p>由操作系统保存当前线程的状态，并恢复另一个线程的状态</p>\n</li>\n<li><p>Java 中对应的概念 就是程序计数器（Program Counter Register），它的作用是记住下一条 jvm 指令的执行地址，是线程私有的 </p>\n</li>\n<li><p>状态包括程序计数器、虚拟机栈中每个栈帧的信息，如局部变量、操作数栈、返回地址等 </p>\n</li>\n<li><p>Context Switch 频繁发生会<em><strong>影响性能</strong></em></p>\n</li>\n</ul>\n<h4 id=\"四、常见方法\"><a href=\"#四、常见方法\" class=\"headerlink\" title=\"四、常见方法\"></a>四、常见方法</h4><table>\n<thead>\n<tr>\n<th align=\"center\">方法名</th>\n<th align=\"center\">static</th>\n<th align=\"center\">功能说明</th>\n<th align=\"left\">注意</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">start()</td>\n<td align=\"center\"></td>\n<td align=\"center\">启动一个新线 程，在新的线程 运行 run 方法 中的代码</td>\n<td align=\"left\">start 方法只是让线程进入就绪，里面代码不一定立刻 运行（CPU 的时间片还没分给它）。每个线程对象的 start方法只能调用一次，如果调用了多次会出现 IllegalThreadStateException</td>\n</tr>\n<tr>\n<td align=\"center\">run()</td>\n<td align=\"center\"></td>\n<td align=\"center\">新线程启动后会 调用的方法</td>\n<td align=\"left\">如果在构造 Thread 对象时传递了 Runnable 参数，则 线程启动后会调用 Runnable 中的 run 方法，否则默 认不执行任何操作。但可以创建 Thread 的子类对象， 来覆盖默认行为</td>\n</tr>\n<tr>\n<td align=\"center\">join()</td>\n<td align=\"center\"></td>\n<td align=\"center\">等待线程运行结 束</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">join(long n)</td>\n<td align=\"center\"></td>\n<td align=\"center\">等待线程运行结 束,最多等待 n  毫秒</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">getId()</td>\n<td align=\"center\"></td>\n<td align=\"center\">获取线程长整型 的 id</td>\n<td align=\"left\">id 唯一</td>\n</tr>\n<tr>\n<td align=\"center\">getName()</td>\n<td align=\"center\"></td>\n<td align=\"center\">获取线程名</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">setName(String)</td>\n<td align=\"center\"></td>\n<td align=\"center\">修改线程名</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">getPriority()</td>\n<td align=\"center\"></td>\n<td align=\"center\">获取线程优先级</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">setPriority(int)</td>\n<td align=\"center\"></td>\n<td align=\"center\">修改线程优先级</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">getState()</td>\n<td align=\"center\"></td>\n<td align=\"center\">获取线程状态</td>\n<td align=\"left\">Java 中线程状态是用 6 个 enum 表示，分别为： NEW, RUNNABLE, BLOCKED, WAITING,  TIMED_WAITING, TERMINATED</td>\n</tr>\n<tr>\n<td align=\"center\">isInterrupted()</td>\n<td align=\"center\"></td>\n<td align=\"center\">判断是否被打 断</td>\n<td align=\"left\">不会清除 <strong>打断标记</strong></td>\n</tr>\n<tr>\n<td align=\"center\">isAlive()</td>\n<td align=\"center\"></td>\n<td align=\"center\">线程是否存活 （还没有运行完 毕）</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">interrupt()</td>\n<td align=\"center\"></td>\n<td align=\"center\">打断线程</td>\n<td align=\"left\">如果被打断线程正在 sleep，wait，join 会导致被打断的线程抛出 InterruptedException，并清除 <strong>打断标记</strong> ；如果打断的正在运行的线程，则会设置 <strong>打断标记</strong> ；park 的线程被打断，也会设置 <strong>打断标记</strong></td>\n</tr>\n<tr>\n<td align=\"center\">interrupted()</td>\n<td align=\"center\">static</td>\n<td align=\"center\">判断当前线程是 否被打断</td>\n<td align=\"left\">会清除 <strong>打断标记</strong></td>\n</tr>\n<tr>\n<td align=\"center\">currentThread()</td>\n<td align=\"center\">static</td>\n<td align=\"center\">获取当前正在执 行的线程</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">sleep(long n)</td>\n<td align=\"center\">static</td>\n<td align=\"center\">让当前执行的线 程休眠n毫秒， 休眠时让出 cpu  的时间片给其它 线程</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">yield()</td>\n<td align=\"center\">static</td>\n<td align=\"center\">提示线程调度器 让出当前线程对 CPU的使用</td>\n<td align=\"left\">主要是为了测试和调试</td>\n</tr>\n</tbody></table>\n<h5 id=\"4-1start-与-run\"><a href=\"#4-1start-与-run\" class=\"headerlink\" title=\"4.1start 与 run\"></a>4.1start 与 run</h5><ul>\n<li>直接调用 run 是在主线程main中执行run，不会启动新的线程 </li>\n<li>使用 start 是启动新的线程，通过新的线程间接执行 run 中的代码, start不可重复调用</li>\n</ul>\n<h5 id=\"4-2sleep-与-yield\"><a href=\"#4-2sleep-与-yield\" class=\"headerlink\" title=\"4.2sleep 与 yield\"></a>4.2sleep 与 yield</h5><ul>\n<li><p>sleep</p>\n<ol>\n<li><p>调用 sleep 会让当前线程从 Running 进入 Timed Waiting 状态（阻塞） </p>\n</li>\n<li><p>其它线程可以使用 interrupt 方法打断正在睡眠的线程，这时 sleep 方法会抛出 InterruptedException</p>\n</li>\n<li><p>睡眠结束后的线程未必会立刻得到执行</p>\n</li>\n<li><p>建议用 TimeUnit 的 sleep 代替 Thread 的 sleep 来获得更好的可读性</p>\n</li>\n</ol>\n</li>\n<li><p>yield</p>\n<ol>\n<li><p>调用 yield 会让当前线程从 Running 进入 Runnable 就绪状态，然后调度执行其它线程</p>\n</li>\n<li><p>具体的实现依赖于操作系统的任务调度器, 可能会立即在分配时间片运行</p>\n</li>\n</ol>\n</li>\n</ul>\n<h5 id=\"4-3线程优先级-setPriority-int\"><a href=\"#4-3线程优先级-setPriority-int\" class=\"headerlink\" title=\"4.3线程优先级  setPriority(int)\"></a>4.3线程优先级  setPriority(int)</h5><ul>\n<li><p>线程优先级(1~10)会提示（hint）调度器优先调度该线程，但它<strong>仅仅是一个提示</strong>，调度器可以忽略它 </p>\n</li>\n<li><p>如果 cpu 比较忙，那么优先级高的线程会获得更多的时间片，但 cpu 闲时，优先级几乎没作用</p>\n</li>\n</ul>\n<h5 id=\"4-4interrupt-模式之两阶段终止\"><a href=\"#4-4interrupt-模式之两阶段终止\" class=\"headerlink\" title=\"4.4interrupt  模式之两阶段终止\"></a>4.4interrupt  <strong><u>模式之两阶段终止</u></strong></h5><ul>\n<li><p>打断 sleep，wait，join 的线程，抛出InterruptedException，清空打断状态</p>\n</li>\n<li><p>打断正常运行的线程, 不会清空打断状态</p>\n</li>\n<li><p>打断 park 线程, 不会清空打断状态，再次执行<code>LockSupport.park();</code>，不再生效。可用<code>interrupted()</code>清除打断标记</p>\n</li>\n</ul>\n<h5 id=\"4-5主线程-amp-守护线程\"><a href=\"#4-5主线程-amp-守护线程\" class=\"headerlink\" title=\"4.5主线程&amp;守护线程\"></a>4.5主线程&amp;守护线程</h5><blockquote>\n<p>默认情况下，Java 进程需要等待所有线程都运行结束，才会结束。有一种特殊的线程叫做守护线程，只要其它非守护线程运行结束了，即使守护线程的代码没有执行完，也会强制结束。</p>\n<ul>\n<li>垃圾回收器线程就是一种守护线程 </li>\n<li>Tomcat 中的 Acceptor 和 Poller 线程都是守护线程，所以 Tomcat 接收到 shutdown 命令后，不会等待它们处理完当前请求</li>\n</ul>\n</blockquote>\n<h4 id=\"五、线程状态\"><a href=\"#五、线程状态\" class=\"headerlink\" title=\"五、线程状态\"></a>五、线程状态</h4><h5 id=\"5-1操作系统描述\"><a href=\"#5-1操作系统描述\" class=\"headerlink\" title=\"5.1操作系统描述\"></a>5.1操作系统描述</h5><p><img src=\"/2023/03/07/JUC/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81%E6%8F%8F%E8%BF%B0.png\"></p>\n<blockquote>\n<ul>\n<li>【初始状态】仅是在语言层面创建了线程对象，还未与操作系统线程关联 </li>\n<li>【可运行状态】（就绪状态）指该线程已经被创建（与操作系统线程关联），可以由 CPU 调度执行 </li>\n<li>【运行状态】指获取了 CPU 时间片运行中的状态 当 CPU 时间片用完，会从【运行状态】转换至【可运行状态】，会导致线程的上下文切换 </li>\n<li>【阻塞状态】 <ul>\n<li>如果调用了阻塞 API，如 BIO 读写文件，这时该线程实际不会用到 CPU，会导致线程上下文切换，进入 【阻塞状态】 </li>\n<li>等 BIO 操作完毕，会由操作系统唤醒阻塞的线程，转换至【可运行状态】</li>\n<li>与【可运行状态】的区别是，对【阻塞状态】的线程来说只要它们一直不唤醒，调度器就一直不会考虑调度它们</li>\n</ul>\n</li>\n<li>【终止状态】表示线程已经执行完毕，生命周期已经结束，不会再转换为其它状态</li>\n</ul>\n</blockquote>\n<h5 id=\"5-3Java-API描述\"><a href=\"#5-3Java-API描述\" class=\"headerlink\" title=\"5.3Java API描述\"></a>5.3Java API描述</h5><p><img src=\"/2023/03/07/JUC/JavaAPI%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81%E6%8F%8F%E8%BF%B0.png\"></p>\n<blockquote>\n<ul>\n<li>NEW 线程刚被创建，但是还没有调用 start() 方法 </li>\n<li>RUNNABLE 当调用了 start() 方法之后，注意，Java API 层面的 RUNNABLE 状态涵盖了 操作系统 层面的 【可运行状态】、【运行状态】和【阻塞状态】（由于 BIO 导致的线程阻塞，在 Java 里无法区分，仍然认为 是可运行）</li>\n<li>BLOCKED ， WAITING ， TIMED_WAITING 都是 Java API 层面对【阻塞状态】的细分</li>\n<li>TERMINATED 当线程代码运行结束</li>\n</ul>\n</blockquote>\n<h5 id=\"5-4状态转换\"><a href=\"#5-4状态转换\" class=\"headerlink\" title=\"5.4状态转换\"></a>5.4状态转换</h5><ol>\n<li><p><code>NEW --&gt; RUNNABLE</code> </p>\n<blockquote>\n<p>当调用 t.start() 方法时，由 <code>NEW --&gt; RUNNABLE</code></p>\n</blockquote>\n</li>\n<li><p><code>RUNNABLE &lt;--&gt; WAITING</code></p>\n<blockquote>\n<ol>\n<li><p>t线程用 synchronized(obj) 获取了对象锁</p>\n<ul>\n<li><p>调用 obj.wait() 方法时，t 线程从 <code>RUNNABLE --&gt; WAITING</code></p>\n</li>\n<li><p>调用 obj.notify() ， obj.notifyAll() ， t.interrupt() </p>\n<ul>\n<li>竞争锁成功，t 线程从 <code>WAITING --&gt; RUNNABLE</code></li>\n<li>竞争锁失败，t 线程从 <code>WAITING --&gt; BLOCKED</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>当前线程调用 t.join() 方法时，当前线程从 <code>RUNNABLE --&gt; WAITING</code></p>\n</li>\n</ol>\n<blockquote>\n<p>注意是当前线程在t 线程对象的监视器上等待</p>\n</blockquote>\n<p>   t 线程运行结束，或调用了当前线程的 interrupt() 时，当前线程从 <code>WAITING --&gt; RUNNABLE</code></p>\n<ol start=\"3\">\n<li><p>当前线程调用 LockSupport.park() 方法会让当前线程从 <code>RUNNABLE --&gt; WAITING</code></p>\n<p>调用 LockSupport.unpark(目标线程) 或调用了线程 的 interrupt() ，会让目标线程从 <code>WAITING --&gt;  RUNNABLE</code></p>\n</li>\n</ol>\n</blockquote>\n</li>\n<li><p><code>RUNNABLE &lt;--&gt; TIMED_WAITING</code></p>\n<blockquote>\n<ol>\n<li><p>t 线程用 synchronized(obj) 获取了对象锁后</p>\n<ul>\n<li>调用 obj.wait(long n) 方法时，t 线程从 <code>RUNNABLE --&gt; TIMED_WAITING</code></li>\n<li>t 线程等待时间超过了 n 毫秒，或调用 obj.notify() ， obj.notifyAll() ， t.interrupt() <ul>\n<li>竞争锁成功，t 线程从 <code>TIMED_WAITING --&gt; RUNNABLE </code></li>\n<li>竞争锁失败，t 线程从 <code>TIMED_WAITING --&gt; BLOCKED</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>当前线程调用 t.join(long n) 方法时，当前线程从 <code>RUNNABLE --&gt; TIMED_WAITING</code></p>\n<p>当前线程等待时间超过了 n 毫秒，或t 线程运行结束，或调用了当前线程的 interrupt() 时，当前线程从 <code>TIMED_WAITING --&gt; RUNNABLE</code></p>\n</li>\n<li><p>当前线程调用 Thread.sleep(long n) ，当前线程从 <code>RUNNABLE --&gt; TIMED_WAITING</code> </p>\n<p>当前线程等待时间超过了 n 毫秒，当前线程从 <code>TIMED_WAITING --&gt; RUNNABLE</code></p>\n</li>\n<li><p>当前线程调用 LockSupport.parkNanos(long nanos) 或 LockSupport.parkUntil(long millis) 时，当前线 程从 <code>RUNNABLE --&gt; TIMED_WAITING</code></p>\n</li>\n<li><p>调用 LockSupport.unpark(目标线程) 或调用了线程 的 interrupt() ，或是等待超时，会让目标线程从 <code>TIMED_WAITING--&gt; RUNNABLE</code></p>\n</li>\n</ol>\n</blockquote>\n</li>\n<li><p><code>RUNNABLE &lt;--&gt; BLOCKED</code></p>\n<ul>\n<li>t 线程用 synchronized(obj) 获取了对象锁时如果竞争失败，从 <code>RUNNABLE --&gt; BLOCKED</code></li>\n<li>持 obj 锁线程的同步代码块执行完毕，会唤醒该对象上所有 <code>BLOCKED</code> 的线程重新竞争，如果其中 t 线程竞争 成功，从 <code>BLOCKED --&gt; RUNNABLE</code>，其它失败的线程仍然 <code>BLOCKED</code></li>\n</ul>\n</li>\n<li><p><code>RUNNABLE &lt;--&gt; TERMINATED</code></p>\n<blockquote>\n<p>当前线程所有代码运行完毕，进入 <code>TERMINATED</code></p>\n</blockquote>\n</li>\n</ol>\n<h4 id=\"六、共享模型之管程\"><a href=\"#六、共享模型之管程\" class=\"headerlink\" title=\"六、共享模型之管程\"></a>六、共享模型之管程</h4><h5 id=\"6-1共享问题\"><a href=\"#6-1共享问题\" class=\"headerlink\" title=\"6.1共享问题\"></a>6.1共享问题</h5><ul>\n<li><p>临界区 Critical Section</p>\n<blockquote>\n<p>一段代码块内如果存在对共享资源的多线程读写操作，称这段代码块为临界区</p>\n</blockquote>\n</li>\n<li><p>竞态条件 Race Condition</p>\n<blockquote>\n<p>多个线程在临界区内执行，由于代码的执行序列不同而导致结果无法预测，称之为发生了竞态条件</p>\n</blockquote>\n</li>\n<li><p>解决方案</p>\n<blockquote>\n<ul>\n<li>阻塞式的解决方案：synchronized，Lock</li>\n<li>非阻塞式的解决方案：原子变量</li>\n</ul>\n</blockquote>\n</li>\n<li><p>synchronized</p>\n<blockquote>\n<p>【对象锁】，它采用互斥的方式让同一 时刻至多只有一个线程能持有【对象锁】，其它线程再想获取这个【对象锁】时就会阻塞住。这样就能保证拥有锁 的线程可以安全的执行临界区内的代码，不用担心线程上下文切换</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">synchronized</span>(对象) <span class=\"comment\">// 线程1， 线程2(blocked)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> 临界区</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></blockquote>\n</li>\n</ul>\n<h5 id=\"6-2线程八锁\"><a href=\"#6-2线程八锁\" class=\"headerlink\" title=\"6.2线程八锁\"></a>6.2线程八锁</h5><blockquote>\n<p>考察 synchronized 锁住的是哪个对象  </p>\n</blockquote>\n<ul>\n<li><p>情况1：12 或 21</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j(topic = &quot;c.Number&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Number</span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">a</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">     \tlog.debug(<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">b</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">     \tlog.debug(<span class=\"string\">&quot;2&quot;</span>);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">     <span class=\"type\">Number</span> <span class=\"variable\">n1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Number</span>();</span><br><span class=\"line\">     <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123; n1.a(); &#125;).start();</span><br><span class=\"line\">     <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123; n1.b(); &#125;).start();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>情况2：1s后12，或 2 1s后 1</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j(topic = &quot;c.Number&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Number</span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">a</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">         sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">         log.debug(<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">b</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">     \tlog.debug(<span class=\"string\">&quot;2&quot;</span>);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">     <span class=\"type\">Number</span> <span class=\"variable\">n1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Number</span>();</span><br><span class=\"line\">     <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123; n1.a(); &#125;).start();</span><br><span class=\"line\">     <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123; n1.b(); &#125;).start();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>情况3：3 1s 12 或 23 1s 1 或 32 1s 1</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Number</span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">a</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">         sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">         log.debug(<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">b</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">     \tlog.debug(<span class=\"string\">&quot;2&quot;</span>);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">c</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    \tlog.debug(<span class=\"string\">&quot;3&quot;</span>);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">     <span class=\"type\">Number</span> <span class=\"variable\">n1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Number</span>();</span><br><span class=\"line\">     <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123; n1.a(); &#125;).start();</span><br><span class=\"line\">     <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123; n1.b(); &#125;).start();</span><br><span class=\"line\">     <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123; n1.c(); &#125;).start();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>情况4：2 1s 后 1</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j(topic = &quot;c.Number&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Number</span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">a</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">         sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">         log.debug(<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">b</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">         log.debug(<span class=\"string\">&quot;2&quot;</span>);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">     <span class=\"type\">Number</span> <span class=\"variable\">n1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Number</span>();</span><br><span class=\"line\">     <span class=\"type\">Number</span> <span class=\"variable\">n2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Number</span>();</span><br><span class=\"line\">     <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123; n1.a(); &#125;).start();</span><br><span class=\"line\">     <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123; n2.b(); &#125;).start();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>情况5：2 1s 后 1</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j(topic = &quot;c.Number&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Number</span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">a</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">         sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">         log.debug(<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">b</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">         log.debug(<span class=\"string\">&quot;2&quot;</span>);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">     <span class=\"type\">Number</span> <span class=\"variable\">n1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Number</span>();</span><br><span class=\"line\">     <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123; n1.a(); &#125;).start();</span><br><span class=\"line\">     <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123; n1.b(); &#125;).start();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>情况6：1s 后12， 或 2 1s后 1</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j(topic = &quot;c.Number&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Number</span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">a</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">         sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">         log.debug(<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">b</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">         log.debug(<span class=\"string\">&quot;2&quot;</span>);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">     <span class=\"type\">Number</span> <span class=\"variable\">n1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Number</span>();</span><br><span class=\"line\">     <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123; n1.a(); &#125;).start();</span><br><span class=\"line\">     <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123; n1.b(); &#125;).start();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>情况7：2 1s 后 1</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j(topic = &quot;c.Number&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Number</span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">a</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">         sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">         log.debug(<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">b</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">         log.debug(<span class=\"string\">&quot;2&quot;</span>);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">     <span class=\"type\">Number</span> <span class=\"variable\">n1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Number</span>();</span><br><span class=\"line\">     <span class=\"type\">Number</span> <span class=\"variable\">n2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Number</span>();</span><br><span class=\"line\">     <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123; n1.a(); &#125;).start();</span><br><span class=\"line\">     <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123; n2.b(); &#125;).start();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>情况8：1s 后12， 或 2 1s后 1</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j(topic = &quot;c.Number&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Number</span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">a</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">         sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">         log.debug(<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">b</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">         log.debug(<span class=\"string\">&quot;2&quot;</span>);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">     <span class=\"type\">Number</span> <span class=\"variable\">n1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Number</span>();</span><br><span class=\"line\">     <span class=\"type\">Number</span> <span class=\"variable\">n2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Number</span>();</span><br><span class=\"line\">     <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123; n1.a(); &#125;).start();</span><br><span class=\"line\">     <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123; n2.b(); &#125;).start();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"6-3线程安全分析\"><a href=\"#6-3线程安全分析\" class=\"headerlink\" title=\"6.3线程安全分析\"></a>6.3线程安全分析</h5><ol>\n<li><p>成员变量和静态变量是否线程安全？</p>\n<ul>\n<li><p>如果它们没有共享，则线程安全</p>\n</li>\n<li><p>如果它们被共享了，根据它们的状态是否能够改变，又分两种情况 </p>\n<ul>\n<li>如果只有读操作，则线程安全 </li>\n<li>如果有读写操作，则这段代码是临界区，需要考虑线程安全</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>局部变量是否线程安全？</p>\n<ul>\n<li><p>局部变量是线程安全的 </p>\n</li>\n<li><p>但局部变量引用的对象则未必 </p>\n<ul>\n<li>如果该对象没有逃离方法的作用访问，它是线程安全的 </li>\n<li>如果该对象逃离方法的作用范围，需要考虑线程安全</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>常见线程安全类</p>\n<blockquote>\n<p>它们是线程安全的是指多个线程调用它们同一个实例的某个方法时，是线程安全的。</p>\n<ul>\n<li><p>它们的每个方法是原子的</p>\n</li>\n<li><p>但注意它们多个方法的组合不是原子的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Hashtable</span> <span class=\"variable\">table</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Hashtable</span>();</span><br><span class=\"line\"><span class=\"comment\">// 线程1，线程2</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>( table.get(<span class=\"string\">&quot;key&quot;</span>) == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\"> table.put(<span class=\"string\">&quot;key&quot;</span>, value);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<h5 id=\"6-4Monitor\"><a href=\"#6-4Monitor\" class=\"headerlink\" title=\"6.4Monitor\"></a>6.4Monitor</h5><blockquote>\n<p>Monitor 被翻译为监视器或管程 </p>\n<p>每个 Java 对象都可以关联一个 Monitor 对象，如果使用 synchronized 给对象上锁（重量级）之后，该对象头的 Mark Word 中就被设置指向 Monitor 对象的指针</p>\n<p><img src=\"/2023/03/07/JUC/monitor%E7%BB%93%E6%9E%84.png\"></p>\n<ul>\n<li>synchronized 必须是进入同一个对象的 monitor 才有上述的效果 </li>\n<li>不加 synchronized 的对象不会关联监视器，不遵从以上规则</li>\n</ul>\n</blockquote>\n<ol>\n<li>java对象头<ul>\n<li><p>普通对象、</p>\n<blockquote>\n<p><img src=\"/2023/03/07/JUC/%E6%99%AE%E9%80%9A%E5%AF%B9%E8%B1%A1.png\"></p>\n</blockquote>\n</li>\n<li><p>数组对象\t</p>\n<blockquote>\n<p><img src=\"/2023/03/07/JUC/%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1.png\"></p>\n</blockquote>\n</li>\n<li><p>Mark Word结构</p>\n<blockquote>\n<p>![](mark word.png)</p>\n</blockquote>\n</li>\n<li><p>64位虚拟机Mark Word</p>\n<blockquote>\n<p>![](64位虚拟机mark word.png)</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ol>\n<h5 id=\"6-5轻量级锁\"><a href=\"#6-5轻量级锁\" class=\"headerlink\" title=\"6.5轻量级锁\"></a>6.5轻量级锁</h5><blockquote>\n<p>如果一个对象虽然有多线程要加锁，但加锁的时间是错开的（也就是没有竞争），那么可以 使用轻量级锁来优化。</p>\n<p>cas: 将锁对象的mark word与锁记录地址交换，解锁时还原</p>\n</blockquote>\n<p><img src=\"/2023/03/07/JUC/%E8%BD%BB%E9%87%8F%E7%BA%A7%E9%94%81.png\"></p>\n<ul>\n<li><p>锁记录（Lock Record）对象，每个线程都的栈帧都会包含一个锁记录的结构，内部可以存储锁定对象的 Mark Word</p>\n</li>\n<li><p>Object reference 指向锁对象，并尝试用 cas 替换 Object 的 Mark Word，将 Mark Word 的值存 入锁记录</p>\n<ul>\n<li>cas 替换成功，对象头中存储了 锁记录地址和状态 00 ，表示由该线程给对象加锁</li>\n<li>cas 失败，有两种情况</li>\n<li>如果是其它线程已经持有了该 Object 的轻量级锁，这时表明有竞争，进入锁膨胀过程， Mark Word指向Monitor</li>\n<li>如果是自己执行了 synchronized 锁重入，那么再添加一条 Lock Record 作为重入的计数</li>\n</ul>\n</li>\n<li><p>当退出 synchronized 代码块（解锁时）如果有取值为 null 的锁记录，表示有重入，这时重置锁记录，表示重 入计数减一</p>\n</li>\n<li><p>当退出 synchronized 代码块（解锁时）锁记录的值不为 null，这时使用 cas 将 Mark Word 的值恢复给对象头</p>\n<ul>\n<li>成功，则解锁成功 </li>\n<li>失败，说明轻量级锁进行了锁膨胀或已经升级为重量级锁，进入重量级锁解锁流程</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"6-6锁膨胀\"><a href=\"#6-6锁膨胀\" class=\"headerlink\" title=\"6.6锁膨胀\"></a>6.6锁膨胀</h5><blockquote>\n<p>在尝试加轻量级锁的过程中，CAS 操作无法成功，这时一种情况就是有其它线程为此对象加上了轻量级锁（有 竞争），这时需要进行锁膨胀，将轻量级锁变为重量级锁。</p>\n</blockquote>\n<ol>\n<li><p>当 Thread-1 进行轻量级加锁时，Thread-0 已经对该对象加了轻量级锁</p>\n<p><img src=\"/2023/03/07/JUC/%E9%94%81%E8%86%A8%E8%83%801-1.png\"></p>\n</li>\n<li><p>Thread-1 加轻量级锁失败，进入锁膨胀流程</p>\n<ul>\n<li>为 Object 对象申请 Monitor 锁，让 Object 指向重量级锁地址</li>\n<li>自己进入 Monitor 的 EntryList BLOCKED</li>\n<li>当 Thread-0 退出同步块解锁时，使用 cas 将 Mark Word 的值恢复给对象头，失败。这时会进入重量级解锁 流程，即按照 Monitor 地址找到 Monitor 对象，设置 Owner 为 null，唤醒 EntryList 中 BLOCKED 线程</li>\n</ul>\n<p><img src=\"/2023/03/07/JUC/%E9%94%81%E8%86%A8%E8%83%801-2.png\"></p>\n</li>\n</ol>\n<h5 id=\"6-7自旋优化\"><a href=\"#6-7自旋优化\" class=\"headerlink\" title=\"6.7自旋优化\"></a>6.7自旋优化</h5><blockquote>\n<p>重量级锁竞争时，可以使用自旋来进行优化，如果当前线程自旋成功（即这时候持锁线程已经退出了同步块，释放了锁），这时当前线程就可以避免阻塞。</p>\n<ul>\n<li>自旋会占用 CPU 时间，<strong>单核 CPU 自旋就是浪费，多核 CPU 自旋才能发挥优势</strong>。</li>\n<li>在 Java 6 之后自旋锁是自适应的，比如对象刚刚的一次自旋操作成功过，那么认为这次自旋成功的可能性会高，就多自旋几次；反之，就少自旋甚至不自旋。</li>\n<li>Java 7 之后不能控制是否开启自旋功能</li>\n</ul>\n</blockquote>\n<p><img src=\"/2023/03/07/JUC/%E8%87%AA%E6%97%8B%E4%BC%98%E5%8C%96.png\"></p>\n<h5 id=\"6-8偏向锁\"><a href=\"#6-8偏向锁\" class=\"headerlink\" title=\"6.8偏向锁\"></a>6.8偏向锁</h5><blockquote>\n<p>轻量级锁在没有竞争时（就自己这个线程），每次重入仍然需要执行 CAS 操作。 Java 6 中引入了偏向锁来做进一步优化：只有第一次使用 CAS 将线程 ID 设置到对象的 Mark Word 头，之后发现 这个线程 ID 是自己的就表示没有竞争，不用重新 CAS。以后只要不发生竞争，这个对象就归该线程所有</p>\n</blockquote>\n<ul>\n<li>如果开启了偏向锁（默认开启），那么对象创建后，markword 值为 0x05 即最后 3 位为 101，这时它的 thread、epoch、age 都为 0</li>\n<li>偏向锁是默认是延迟的，不会在程序启动时立即生效，如果想避免延迟，可以加 VM 参数 - XX:BiasedLockingStartupDelay&#x3D;0 来禁用延迟</li>\n<li>如果没有开启偏向锁，那么对象创建后，markword 值为 0x01 即最后 3 位为 001，这时它的 hashcode、 age 都为 0，第一次用到 hashcode 时才会赋值</li>\n</ul>\n<ol>\n<li><p>撤销 - 调用对象 hashCode</p>\n<blockquote>\n<p>调用了对象的 hashCode，但偏向锁的对象 MarkWord 中存储的是线程 id，如果调用 hashCode 会导致偏向锁<strong>线程 id位数不足</strong>导致被撤销</p>\n<ul>\n<li>轻量级锁会在锁记录中记录 hashCode</li>\n<li>重量级锁会在 Monitor 中记录 hashCode</li>\n</ul>\n</blockquote>\n</li>\n<li><p>撤销 - 其它线程使用对象</p>\n<blockquote>\n<p>当有其它线程使用偏向锁对象时，会将偏向锁升级为轻量级锁</p>\n</blockquote>\n</li>\n<li><p>撤销 - 调用 wait&#x2F;notify</p>\n</li>\n<li><p>批量重偏向</p>\n<blockquote>\n<p>如果对象虽然被多个线程访问，但没有竞争，这时偏向了线程 T1 的对象仍有机会重新偏向 T2，重偏向会重置对象 的 Thread ID</p>\n<p>当撤销偏向锁阈值超过 20 次后，jvm 会这样觉得，我是不是偏向错了呢，于是会在给这些对象加锁时重新偏向至 加锁线程</p>\n</blockquote>\n</li>\n<li><p>批量撤销</p>\n<blockquote>\n<p>当撤销偏向锁阈值超过 40 次后，jvm 会这样觉得，自己确实偏向错了，根本就不该偏向。于是整个类的所有对象 都会变为不可偏向的，新建的对象也是不可偏向的</p>\n</blockquote>\n</li>\n</ol>\n<h5 id=\"6-9锁消除\"><a href=\"#6-9锁消除\" class=\"headerlink\" title=\"6.9锁消除\"></a>6.9锁消除</h5><blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">b</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    <span class=\"type\">Object</span> <span class=\"variable\">o</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br><span class=\"line\">    <span class=\"comment\">// o对象不会逃出，此时加锁无意义，JIT进行优化使得synchronized不起作用</span></span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span> (o) &#123;  </span><br><span class=\"line\">        x++;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n</blockquote>\n<h5 id=\"6-10锁粗化\"><a href=\"#6-10锁粗化\" class=\"headerlink\" title=\"6.10锁粗化\"></a>6.10锁粗化</h5><blockquote>\n<p>对相同对象多次加锁，导致线程发生多次重入，可以使用锁粗化方式来优化，这不同于之前讲的细分锁的粒度。</p>\n</blockquote>\n<h5 id=\"6-11wait-x2F-notify-同步模式之保护性暂停-同步模式之生产者-amp-消费者\"><a href=\"#6-11wait-x2F-notify-同步模式之保护性暂停-同步模式之生产者-amp-消费者\" class=\"headerlink\" title=\"6.11wait&#x2F;notify  同步模式之保护性暂停 \t同步模式之生产者&amp;消费者\"></a>6.11wait&#x2F;notify  <em><u><strong>同步模式之保护性暂停</strong></u></em> \t<u><em>同步模式之生产者&amp;消费者</em></u></h5><blockquote>\n<p>它们都是线程之间进行协作的手段，都属于 Object 对象的方法。必须获得此对象的锁，才能调用这几个方法</p>\n<ul>\n<li>obj.wait() 让进入 object 监视器的线程到 waitSet 等待 </li>\n<li>obj.notify() 在 object 上正在 waitSet 等待的线程中挑一个唤醒</li>\n<li>obj.notifyAll() 让 object 上正在 waitSet 等待的线程全部唤醒</li>\n<li>notify 只能随机唤醒一个 WaitSet 中的线程，这时如果有其它线程也在等待，那么就可能唤醒不了正确的线程，称之为<strong>虚假唤醒</strong></li>\n</ul>\n<p>通用语法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 多个线程</span></span><br><span class=\"line\"><span class=\"keyword\">synchronized</span>(lock) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">while</span>(条件不成立) &#123;</span><br><span class=\"line\">         lock.wait();</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> \t<span class=\"comment\">// 干活</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//另一个线程</span></span><br><span class=\"line\"><span class=\"keyword\">synchronized</span>(lock) &#123;</span><br><span class=\"line\">     lock.notifyAll();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<ol>\n<li>sleep(long n) 和 wait(long n) 的区别<ul>\n<li>sleep 是 Thread 方法，而 wait 是 Object 的方法</li>\n<li>sleep 不需要强制和 synchronized 配合使用，但 wait 需要 和 synchronized 一起用 </li>\n<li>sleep 在睡眠的同时，不会释放对象锁的，但 wait 在等待的时候会释放对象锁 </li>\n<li>它们状态 TIMED_WAITING</li>\n</ul>\n</li>\n</ol>\n<h5 id=\"6-12park-amp-unpark\"><a href=\"#6-12park-amp-unpark\" class=\"headerlink\" title=\"6.12park&amp;unpark\"></a>6.12park&amp;unpark</h5><blockquote>\n<p>每个线程都有自己的一个 Parker 对象，由三部分组成 _counter ， _cond 和 _mutex </p>\n</blockquote>\n<ul>\n<li>wait，notify 和 notifyAll 必须配合 Object Monitor 一起使用，而 park，unpark 不必</li>\n<li>park &amp; unpark 是以线程为单位来【阻塞】和【唤醒】线程，而 notify 只能随机唤醒一个等待线程，notifyAll  是唤醒所有等待线程，就不那么【精确】</li>\n<li>park &amp; unpark 可以先 unpark，而 wait &amp; notify 不能先 notify</li>\n</ul>\n<h5 id=\"6-13活跃性\"><a href=\"#6-13活跃性\" class=\"headerlink\" title=\"6.13活跃性\"></a>6.13活跃性</h5><ol>\n<li><p>死锁</p>\n<blockquote>\n<p>定位死锁：以使用 jconsole工具，或者使用 jps 定位进程 id，再用 jstack 定位死锁</p>\n</blockquote>\n</li>\n<li><p>活锁</p>\n<blockquote>\n<p>两个线程互相改变对方的结束条件，最后谁也无法结束</p>\n</blockquote>\n</li>\n<li><p>哲学家就餐</p>\n</li>\n<li><p>饥饿</p>\n<blockquote>\n<p>一个线程由于优先级太低，始终得不到 CPU 调度执行，也不能够结束</p>\n</blockquote>\n</li>\n</ol>\n<h5 id=\"6-14ReentrantLock\"><a href=\"#6-14ReentrantLock\" class=\"headerlink\" title=\"6.14ReentrantLock\"></a>6.14ReentrantLock</h5><ol>\n<li><p>基本语法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">ReentrantLock</span> <span class=\"variable\">reentrantLock</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ReentrantLock</span>();</span><br><span class=\"line\"><span class=\"comment\">// 获取锁</span></span><br><span class=\"line\">reentrantLock.lock();</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">     <span class=\"comment\">// 临界区</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">     <span class=\"comment\">// 释放锁</span></span><br><span class=\"line\">     reentrantLock.unlock();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<ul>\n<li><p>在等待锁的时候可被中断\t</p>\n<ul>\n<li><code>reentrantLock.lockInterruptibly()</code> 不失为一种防止死锁的方式</li>\n</ul>\n</li>\n<li><p>可以设置超时时间</p>\n<ul>\n<li><p><code>reentrantLock.tryLock()</code>\t解决哲学家就餐问题</p>\n</li>\n<li><p><code>reentrantLock.tryLock((1, TimeUnit.SECONDS)</code> 返回值boolean 尝试获得锁，失败则返回</p>\n</li>\n</ul>\n</li>\n<li><p>可以设置为公平锁</p>\n<ul>\n<li>new ReentrantLock(<strong>false</strong>); \t<ul>\n<li><p>先进先得</p>\n</li>\n<li><p>解决饥饿问题但会降低并发度一般不设置</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>与 synchronized 一样，都支持可重入</p>\n<blockquote>\n<p>可重入是指同一个线程如果首次获得了这把锁，那么因为它是这把锁的拥有者，因此有权利再次获取这把锁 </p>\n<p>如果是不可重入锁，那么第二次获得锁时，自己也会被锁挡住</p>\n</blockquote>\n</li>\n<li><p>多条件变量 <code>Condition waitSet = reentrantLock.newCondition();</code></p>\n<blockquote>\n<ul>\n<li>synchronized 中条件变量指 waitSet 休息室，当条件不满足时进入 waitSet 等待</li>\n<li>ReentrantLock 与 synchronized 不同之处</li>\n<li>synchronized 是那些不满足条件的线程都在一间休息室等消息</li>\n<li>ReentrantLock 支持多间休息室，唤醒时也是按休息室来唤醒</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>await 前需要获得锁  <code>waitSet.await()</code></li>\n<li>await 执行后，会释放锁，进入 waitSet</li>\n<li>等待 await 的线程被唤醒（或打断、或超时）取重新竞争 reentrantLock锁 </li>\n<li>竞争 reentrantLock 锁成功后，从 await 后继续执行</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<h4 id=\"七、共享模型之内存\"><a href=\"#七、共享模型之内存\" class=\"headerlink\" title=\"七、共享模型之内存\"></a>七、共享模型之内存</h4><h5 id=\"7-1-Java-内存模型\"><a href=\"#7-1-Java-内存模型\" class=\"headerlink\" title=\"7.1 Java 内存模型\"></a>7.1 Java 内存模型</h5><blockquote>\n<p>JMM 即 Java Memory Model，它定义了主存、工作内存抽象概念，底层对应着 CPU 寄存器、缓存、硬件内存、 CPU 指令优化等。</p>\n</blockquote>\n<ul>\n<li>原子性 - 保证指令不会受到线程上下文切换的影响</li>\n<li>可见性 - 保证指令不会受 cpu 缓存的影响 </li>\n<li>有序性 - 保证指令不会受 cpu 指令并行优化的影响</li>\n</ul>\n<h5 id=\"7-2volatile原理\"><a href=\"#7-2volatile原理\" class=\"headerlink\" title=\"7.2volatile原理\"></a>7.2volatile原理</h5><blockquote>\n<p>volatile 的底层实现原理是内存屏障，Memory Barrier（Memory Fence）</p>\n<ul>\n<li><p>对 volatile 变量的写指令后会加入写屏障</p>\n<blockquote>\n<p>写屏障（sfence）保证在该屏障之前的，对共享变量的改动，都同步到主存当中</p>\n<p>写屏障会确保指令重排序时，不会将写屏障之前的代码排在写屏障之后（单线程中）</p>\n</blockquote>\n</li>\n<li><p>对 volatile 变量的读指令前会加入读屏障</p>\n<blockquote>\n<p>读屏障（lfence）保证在该屏障之后，对共享变量的读取，加载的是主存中最新数据</p>\n<p>读屏障会确保指令重排序时，不会将读屏障之后的代码排在读屏障之前（单线程中）</p>\n</blockquote>\n</li>\n<li><p>可保证可见性与有序性，<strong>无法解决指令交错，即原子性</strong></p>\n</li>\n</ul>\n</blockquote>\n<h5 id=\"7-3可见性-改进终止模式之俩阶段终止模式同步模式之Balking-犹豫模式\"><a href=\"#7-3可见性-改进终止模式之俩阶段终止模式同步模式之Balking-犹豫模式\" class=\"headerlink\" title=\"7.3可见性  改进终止模式之俩阶段终止模式\t同步模式之Balking(犹豫模式)\"></a>7.3可见性  <em><u>改进终止模式之俩阶段终止模式</u></em>\t<u>同步模式之Balking(犹豫模式)</u></h5><p><img src=\"/2023/03/07/JUC/%E4%B8%8D%E5%8F%AF%E8%A7%81.png\"></p>\n<p>解决：</p>\n<ul>\n<li><p>volatile（易变关键字）</p>\n<blockquote>\n<p>用来修饰成员变量和静态成员变量，可以避免线程从自己的工作缓存中查找变量的值，必须到主存中获取 它的值，线程操作 volatile 变量都是直接操作主存。仅能保证可见性，但不能保证原子性</p>\n</blockquote>\n</li>\n<li><p>synchronized 临界区内读取主内存</p>\n<blockquote>\n<p>synchronized 语句块既可以保证代码块的原子性，也同时保证代码块内变量的可见性。缺点是 synchronized 是属于重量级操作，性能相对更低</p>\n</blockquote>\n</li>\n</ul>\n<h5 id=\"7-4有序性\"><a href=\"#7-4有序性\" class=\"headerlink\" title=\"7.4有序性\"></a>7.4有序性</h5><blockquote>\n<p>【指令重排】JVM 会在不影响正确性的前提下，可以调整语句的执行顺序</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"variable\">ready</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"comment\">// 线程1 执行此方法</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">actor1</span><span class=\"params\">(I_Result r)</span> &#123;  <span class=\"comment\">//I_Result 存储结果数据</span></span><br><span class=\"line\">     <span class=\"keyword\">if</span>(ready) &#123;</span><br><span class=\"line\">     \tr.r1 = num + num;</span><br><span class=\"line\">     &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">     \tr.r1 = <span class=\"number\">1</span>;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 线程2 执行此方法</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">actor2</span><span class=\"params\">(I_Result r)</span> &#123; </span><br><span class=\"line\">     num = <span class=\"number\">2</span>;</span><br><span class=\"line\">     ready = <span class=\"literal\">true</span>; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 结果 4 2 0(指令重排)</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n<h5 id=\"7-5-happens-before\"><a href=\"#7-5-happens-before\" class=\"headerlink\" title=\"7.5 happens-before\"></a>7.5 happens-before</h5><blockquote>\n<p>happens-before 规定了对共享变量的写操作对其它线程的读操作可见，它是可见性与有序性的一套规则总结，抛开以下 happens-before 规则，JMM 并不能保证一个线程对共享变量的写，对于其它线程对该共享变量的读可见</p>\n<p>变量为<strong>成员变量或静态变量</strong></p>\n</blockquote>\n<ol>\n<li><p>线程解锁 m 之前对变量的写，对于接下来对 m 加锁的其它线程对该变量的读可见</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"type\">int</span> x;</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"type\">Object</span> <span class=\"variable\">m</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\">     <span class=\"keyword\">synchronized</span>(m) &#123;</span><br><span class=\"line\">     \tx = <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &#125;,<span class=\"string\">&quot;t1&quot;</span>).start();</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\">     <span class=\"keyword\">synchronized</span>(m) &#123;</span><br><span class=\"line\">     \tSystem.out.println(x);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;,<span class=\"string\">&quot;t2&quot;</span>).start();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>线程对 volatile 变量的写，对接下来其它线程对该变量的读可见</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">volatile</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> x;</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\">     x = <span class=\"number\">10</span>;</span><br><span class=\"line\">&#125;,<span class=\"string\">&quot;t1&quot;</span>).start();</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\">     System.out.println(x);</span><br><span class=\"line\">&#125;,<span class=\"string\">&quot;t2&quot;</span>).start();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>线程 start 前对变量的写，对该线程开始后对该变量的读可见</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"type\">int</span> x;</span><br><span class=\"line\">x = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\">     System.out.println(x);</span><br><span class=\"line\">&#125;,<span class=\"string\">&quot;t2&quot;</span>).start();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>线程结束前对变量的写，对其它线程得知它结束后的读可见（比如其它线程调用 t1.isAlive() 或 t1.join()等待结束）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"type\">int</span> x;</span><br><span class=\"line\"><span class=\"type\">Thread</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\">     x = <span class=\"number\">10</span>;</span><br><span class=\"line\">&#125;,<span class=\"string\">&quot;t1&quot;</span>);</span><br><span class=\"line\">t1.start();</span><br><span class=\"line\">t1.join();</span><br><span class=\"line\">System.out.println(x);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>线程 t1 打断 t2（interrupt）前对变量的写，对于其他线程得知 t2 被打断后对变量的读可见（通过 t2.interrupted 或 t2.isInterrupted）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"type\">int</span> x;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">     <span class=\"type\">Thread</span> <span class=\"variable\">t2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\">     <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span>(Thread.currentThread().isInterrupted()) &#123;</span><br><span class=\"line\">             System.out.println(x);</span><br><span class=\"line\">             <span class=\"keyword\">break</span>;</span><br><span class=\"line\">     \t&#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     &#125;,<span class=\"string\">&quot;t2&quot;</span>);</span><br><span class=\"line\">     t2.start();</span><br><span class=\"line\">     <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\">         sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">         x = <span class=\"number\">10</span>;</span><br><span class=\"line\">         t2.interrupt();</span><br><span class=\"line\">     &#125;,<span class=\"string\">&quot;t1&quot;</span>).start();</span><br><span class=\"line\">     <span class=\"keyword\">while</span>(!t2.isInterrupted()) &#123;</span><br><span class=\"line\">     \tThread.<span class=\"keyword\">yield</span>();</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     System.out.println(x);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>对变量默认值（0，false，null）的写，对其它线程对该变量的读可见</p>\n</li>\n<li><p>具有传递性，如果 x hb-&gt; y 并且 y hb-&gt; z 那么有 x hb-&gt; z ，配合 volatile 的防止指令重排</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">volatile</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> x;</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"type\">int</span> y;</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123; </span><br><span class=\"line\">     y = <span class=\"number\">10</span>;</span><br><span class=\"line\">     x = <span class=\"number\">20</span>;</span><br><span class=\"line\">&#125;,<span class=\"string\">&quot;t1&quot;</span>).start();</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\">     <span class=\"comment\">// x=20 对 t2 可见, 同时 y=10 也对 t2 可见</span></span><br><span class=\"line\">     System.out.println(x); </span><br><span class=\"line\">&#125;,<span class=\"string\">&quot;t2&quot;</span>).start();</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h5 id=\"7-6-double-checked-locking-问题\"><a href=\"#7-6-double-checked-locking-问题\" class=\"headerlink\" title=\"7.6 double-checked locking 问题*\"></a>7.6 double-checked locking 问题*</h5><blockquote>\n<p>原理篇</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Singleton</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">private</span> <span class=\"title function_\">Singleton</span><span class=\"params\">()</span> &#123; &#125;</span><br><span class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">volatile</span> <span class=\"type\">Singleton</span> <span class=\"variable\">INSTANCE</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">     <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title function_\">getInstance</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">         <span class=\"comment\">// 实例没创建，才会进入内部的 synchronized代码块</span></span><br><span class=\"line\">         <span class=\"keyword\">if</span> (INSTANCE == <span class=\"literal\">null</span>) &#123; </span><br><span class=\"line\">             <span class=\"keyword\">synchronized</span> (Singleton.class) &#123; <span class=\"comment\">// t2</span></span><br><span class=\"line\">             \t<span class=\"comment\">// 也许有其它线程已经创建实例，所以再判断一次</span></span><br><span class=\"line\">             \t<span class=\"keyword\">if</span> (INSTANCE == <span class=\"literal\">null</span>) &#123; <span class=\"comment\">// t1</span></span><br><span class=\"line\">                 \tINSTANCE = <span class=\"keyword\">new</span> <span class=\"title class_\">Singleton</span>();  <span class=\"comment\">// volatile 防止指令重排先赋值后实例化，导致指令交错时返回不完整单例</span></span><br><span class=\"line\">                 &#125;</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     \t<span class=\"keyword\">return</span> INSTANCE;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"八、共享模型之无锁\"><a href=\"#八、共享模型之无锁\" class=\"headerlink\" title=\"八、共享模型之无锁\"></a>八、共享模型之无锁</h4><h5 id=\"8-1-问题引出\"><a href=\"#8-1-问题引出\" class=\"headerlink\" title=\"8.1 问题引出\"></a>8.1 问题引出</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Account</span> &#123;</span><br><span class=\"line\"> <span class=\"comment\">// 获取余额</span></span><br><span class=\"line\"> Integer <span class=\"title function_\">getBalance</span><span class=\"params\">()</span>;</span><br><span class=\"line\"> <span class=\"comment\">// 取款</span></span><br><span class=\"line\"> <span class=\"keyword\">void</span> <span class=\"title function_\">withdraw</span><span class=\"params\">(Integer amount)</span>;</span><br><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 方法内会启动 1000 个线程，每个线程做 -10 元 的操作</span></span><br><span class=\"line\"><span class=\"comment\"> * 如果初始余额为 10000 那么正确的结果应当是 0</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">demo</span><span class=\"params\">(Account account)</span> &#123;</span><br><span class=\"line\">     List&lt;Thread&gt; ts = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">     <span class=\"type\">long</span> <span class=\"variable\">start</span> <span class=\"operator\">=</span> System.nanoTime();</span><br><span class=\"line\">     <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000</span>; i++) &#123;</span><br><span class=\"line\">             ts.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">             \taccount.withdraw(<span class=\"number\">10</span>);</span><br><span class=\"line\">         &#125;));</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     ts.forEach(Thread::start);</span><br><span class=\"line\">     ts.forEach(t -&gt; &#123;</span><br><span class=\"line\">         <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            t.join();</span><br><span class=\"line\">         &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;);</span><br><span class=\"line\">     <span class=\"type\">long</span> <span class=\"variable\">end</span> <span class=\"operator\">=</span> System.nanoTime();</span><br><span class=\"line\">     System.out.println(account.getBalance() + <span class=\"string\">&quot; cost: &quot;</span> + (end-start)/<span class=\"number\">1000_000</span> + <span class=\"string\">&quot; ms&quot;</span>);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>使用无锁方式解决balance线程安全问题</p>\n</blockquote>\n<h5 id=\"8-2-AtomicInteger使用CAS解决\"><a href=\"#8-2-AtomicInteger使用CAS解决\" class=\"headerlink\" title=\"8.2 AtomicInteger使用CAS解决\"></a>8.2 AtomicInteger使用CAS解决</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AccountSafe</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Account</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> AtomicInteger balance;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">AccountSafe</span><span class=\"params\">(Integer balance)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.balance = <span class=\"keyword\">new</span> <span class=\"title class_\">AtomicInteger</span>(balance);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Integer <span class=\"title function_\">getBalance</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> balance.get();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">withdraw</span><span class=\"params\">(Integer amount)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">prev</span> <span class=\"operator\">=</span> balance.get();</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">next</span> <span class=\"operator\">=</span> prev - amount;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (balance.compareAndSet(prev, next)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 可以简化为下面的方法</span></span><br><span class=\"line\">        <span class=\"comment\">// balance.addAndGet(-1 * amount);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>compareAndSet，它的简称就是 CAS （也有 Compare And Swap 的说法），它必须是原子操作。</p>\n<p>compareAndSet 检查，会在 set 前，先比较 prev 与当前最新值 </p>\n<ul>\n<li>不一致，next 作废，返回 false 表示失败，进入 while 下次循环重试 </li>\n<li>一致，以 next 设置为新值，返回 true 表示成功，跳出循环</li>\n</ul>\n</blockquote>\n<h5 id=\"8-3-CAS\"><a href=\"#8-3-CAS\" class=\"headerlink\" title=\"8.3 CAS\"></a>8.3 CAS</h5><ul>\n<li><p>CAS 借助 volatile 才能读取到共享变量的最新值来实现【比较并交换】的效果</p>\n</li>\n<li><p>结合 CAS 和 volatile 可以实现无锁并发，但只适用于线程数少、多核 CPU 的场景下。</p>\n<blockquote>\n<p>无锁情况下，即使重试失败，线程始终在高速运行，没有停歇，而 synchronized 会让线程在没有获得锁的时 候，发生上下文切换，进入阻塞。</p>\n<p>如果线程数大于CPU核心数，由于没有分到时间片，仍然会进入可运行状态，还是会导致上下文切换。</p>\n</blockquote>\n</li>\n<li><p>CAS 是基于乐观锁的思想：最乐观的估计，不怕别的线程来修改共享变量，就算改了返回false，再次进入循环重试。</p>\n</li>\n<li><p>synchronized 是基于悲观锁的思想：最悲观的估计，得防着其它线程来修改共享变量，线程上了锁后阻塞其它线程，线程修改完毕解开锁，其它线程才有机会。</p>\n</li>\n<li><p>CAS 体现的是无锁并发、无阻塞并发</p>\n<ul>\n<li>因为没有使用 synchronized，所以线程不会陷入阻塞，这是效率提升的因素之一</li>\n<li>但如果竞争激烈，可以想到重试必然频繁发生，反而效率会受影响</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"8-4-原子整数\"><a href=\"#8-4-原子整数\" class=\"headerlink\" title=\"8.4 原子整数\"></a>8.4 原子整数</h5><ol>\n<li><p>J.U.C 并发包提供</p>\n<ul>\n<li><p>AtomicBoolean </p>\n</li>\n<li><p>AtomicInteger </p>\n</li>\n<li><p>AtomicLong</p>\n</li>\n</ul>\n</li>\n<li><p>AtomicInteger 示例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">AtomicInteger</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AtomicInteger</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取并自增（i = 0, 结果 i = 1, 返回 0），类似于 i++</span></span><br><span class=\"line\">System.out.println(i.getAndIncrement());</span><br><span class=\"line\"><span class=\"comment\">// 自增并获取（i = 1, 结果 i = 2, 返回 2），类似于 ++i</span></span><br><span class=\"line\">System.out.println(i.incrementAndGet());</span><br><span class=\"line\"><span class=\"comment\">// 自减并获取（i = 2, 结果 i = 1, 返回 1），类似于 --i</span></span><br><span class=\"line\">System.out.println(i.decrementAndGet());</span><br><span class=\"line\"><span class=\"comment\">// 获取并自减（i = 1, 结果 i = 0, 返回 1），类似于 i--</span></span><br><span class=\"line\">System.out.println(i.getAndDecrement());</span><br><span class=\"line\"><span class=\"comment\">// 获取并加值（i = 0, 结果 i = 5, 返回 0）</span></span><br><span class=\"line\">System.out.println(i.getAndAdd(<span class=\"number\">5</span>));</span><br><span class=\"line\"><span class=\"comment\">// 加值并获取（i = 5, 结果 i = 0, 返回 0）</span></span><br><span class=\"line\">System.out.println(i.addAndGet(-<span class=\"number\">5</span>));</span><br><span class=\"line\"><span class=\"comment\">// 获取并更新（i = 0, p 为 i 的当前值, 结果 i = -2, 返回 0）</span></span><br><span class=\"line\"><span class=\"comment\">// 其中函数中的操作能保证原子，但函数需要无副作用</span></span><br><span class=\"line\">System.out.println(i.getAndUpdate(p -&gt; p - <span class=\"number\">2</span>));</span><br><span class=\"line\"><span class=\"comment\">// 更新并获取（i = -2, p 为 i 的当前值, 结果 i = 0, 返回 0）</span></span><br><span class=\"line\"><span class=\"comment\">// 其中函数中的操作能保证原子，但函数需要无副作用</span></span><br><span class=\"line\">System.out.println(i.updateAndGet(p -&gt; p + <span class=\"number\">2</span>));</span><br><span class=\"line\"><span class=\"comment\">// 获取并计算（i = 0, p 为 i 的当前值, x 为参数1, 结果 i = 10, 返回 0）</span></span><br><span class=\"line\"><span class=\"comment\">// 其中函数中的操作能保证原子，但函数需要无副作用</span></span><br><span class=\"line\"><span class=\"comment\">// getAndUpdate 如果在 lambda 中引用了外部的局部变量，要保证该局部变量是 final 的</span></span><br><span class=\"line\"><span class=\"comment\">// getAndAccumulate 可以通过 参数1 来引用外部的局部变量，但因为其不在 lambda 中因此不必是 final</span></span><br><span class=\"line\">System.out.println(i.getAndAccumulate(<span class=\"number\">10</span>, (p, x) -&gt; p + x));</span><br><span class=\"line\"><span class=\"comment\">// 计算并获取（i = 10, p 为 i 的当前值, x 为参数1, 结果 i = 0, 返回 0）</span></span><br><span class=\"line\"><span class=\"comment\">// 其中函数中的操作能保证原子，但函数需要无副作用</span></span><br><span class=\"line\">System.out.println(i.accumulateAndGet(-<span class=\"number\">10</span>, (p, x) -&gt; p + x));</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h5 id=\"8-5-原子引用\"><a href=\"#8-5-原子引用\" class=\"headerlink\" title=\"8.5 原子引用\"></a>8.5 原子引用</h5><ul>\n<li><p>AtomicReference </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 小数的原子操作</span></span><br><span class=\"line\"><span class=\"comment\">// 操作与AtomicInteger类似</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DecimalAccountSafeCas</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">DecimalAccount</span> &#123;</span><br><span class=\"line\">    AtomicReference&lt;BigDecimal&gt; ref;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">DecimalAccountSafeCas</span><span class=\"params\">(BigDecimal balance)</span> &#123;</span><br><span class=\"line\">        ref = <span class=\"keyword\">new</span> <span class=\"title class_\">AtomicReference</span>&lt;&gt;(balance);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> BigDecimal <span class=\"title function_\">getBalance</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ref.get();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">withdraw</span><span class=\"params\">(BigDecimal amount)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"type\">BigDecimal</span> <span class=\"variable\">prev</span> <span class=\"operator\">=</span> ref.get();</span><br><span class=\"line\">            <span class=\"type\">BigDecimal</span> <span class=\"variable\">next</span> <span class=\"operator\">=</span> prev.subtract(amount);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ref.compareAndSet(prev, next)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>主线程仅能判断出共享变量的值与最初值是否相同，不能感知到这种从 A 改为 B 又 改回 A 的情况</p>\n</blockquote>\n</li>\n<li><p>AtomicStampedReference</p>\n<blockquote>\n<p>AtomicStampedReference 可以给原子引用加上版本号，追踪原子引用整个的变化过程，如： A -&gt; B -&gt; A -&gt; C ，通过AtomicStampedReference，我们可以知道，引用变量中途被更改了几次。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> AtomicStampedReference&lt;String&gt; ref = <span class=\"keyword\">new</span> <span class=\"title class_\">AtomicStampedReference</span>&lt;&gt;(<span class=\"string\">&quot;A&quot;</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">     log.debug(<span class=\"string\">&quot;main start...&quot;</span>);</span><br><span class=\"line\">     <span class=\"comment\">// 获取值 A</span></span><br><span class=\"line\">     <span class=\"type\">String</span> <span class=\"variable\">prev</span> <span class=\"operator\">=</span> ref.getReference();</span><br><span class=\"line\">     <span class=\"comment\">// 获取版本号</span></span><br><span class=\"line\">     <span class=\"type\">int</span> <span class=\"variable\">stamp</span> <span class=\"operator\">=</span> ref.getStamp();</span><br><span class=\"line\">     log.debug(<span class=\"string\">&quot;版本 &#123;&#125;&quot;</span>, stamp);</span><br><span class=\"line\">     <span class=\"comment\">// 如果中间有其它线程干扰，发生了 ABA 现象</span></span><br><span class=\"line\">     other();</span><br><span class=\"line\">     sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">     <span class=\"comment\">// 尝试改为 C</span></span><br><span class=\"line\">     log.debug(<span class=\"string\">&quot;change A-&gt;C &#123;&#125;&quot;</span>, ref.compareAndSet(prev, <span class=\"string\">&quot;C&quot;</span>, stamp, stamp + <span class=\"number\">1</span>));  <span class=\"comment\">// false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">other</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">     <span class=\"comment\">// 从 A--&gt;B </span></span><br><span class=\"line\">     <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">         log.debug(<span class=\"string\">&quot;change A-&gt;B &#123;&#125;&quot;</span>, ref.compareAndSet(ref.getReference(), <span class=\"string\">&quot;B&quot;</span>, </span><br><span class=\"line\">         ref.getStamp(), ref.getStamp() + <span class=\"number\">1</span>));</span><br><span class=\"line\">         log.debug(<span class=\"string\">&quot;更新版本为 &#123;&#125;&quot;</span>, ref.getStamp());</span><br><span class=\"line\">     &#125;, <span class=\"string\">&quot;t1&quot;</span>).start();</span><br><span class=\"line\">     sleep(<span class=\"number\">0.5</span>);</span><br><span class=\"line\">     <span class=\"comment\">// 从 B--&gt;A </span></span><br><span class=\"line\">     <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">         log.debug(<span class=\"string\">&quot;change B-&gt;A &#123;&#125;&quot;</span>, ref.compareAndSet(ref.getReference(), <span class=\"string\">&quot;A&quot;</span>, ref.getStamp(), \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tref.getStamp() + <span class=\"number\">1</span>));</span><br><span class=\"line\">         log.debug(<span class=\"string\">&quot;更新版本为 &#123;&#125;&quot;</span>, ref.getStamp());</span><br><span class=\"line\">     &#125;, <span class=\"string\">&quot;t2&quot;</span>).start();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>AtomicMarkableReference</p>\n<blockquote>\n<p>AtomicMarkableReference不关心引用变量更改了几次，只是单纯的关心是否更改过</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestABAAtomicMarkableReference</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"type\">GarbageBag</span> <span class=\"variable\">bag</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">GarbageBag</span>(<span class=\"string\">&quot;装满了垃圾&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 参数2 mark 可以看作一个标记，表示垃圾袋满了</span></span><br><span class=\"line\">        AtomicMarkableReference&lt;GarbageBag&gt; ref = <span class=\"keyword\">new</span> <span class=\"title class_\">AtomicMarkableReference</span>&lt;&gt;(bag, <span class=\"literal\">true</span>);</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;主线程 start...&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">GarbageBag</span> <span class=\"variable\">prev</span> <span class=\"operator\">=</span> ref.getReference();</span><br><span class=\"line\">        log.debug(prev.toString());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            log.debug(<span class=\"string\">&quot;打扫卫生的线程 start...&quot;</span>);</span><br><span class=\"line\">            bag.setDesc(<span class=\"string\">&quot;空垃圾袋&quot;</span>);</span><br><span class=\"line\">            <span class=\"comment\">// mark为true满足条件，CAS成功mark-&gt;false</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (!ref.compareAndSet(bag, bag, <span class=\"literal\">true</span>, <span class=\"literal\">false</span>)) &#123;&#125;</span><br><span class=\"line\">            log.debug(bag.toString());</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;主线程想换一只新垃圾袋？&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 此时mark为false不满足条件，CAS失败返回false</span></span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">success</span> <span class=\"operator\">=</span> ref.compareAndSet(prev, <span class=\"keyword\">new</span> <span class=\"title class_\">GarbageBag</span>(<span class=\"string\">&quot;空垃圾袋&quot;</span>), <span class=\"literal\">true</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;换了么？&quot;</span> + success);</span><br><span class=\"line\">        log.debug(ref.getReference().toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"8-6-原子数组\"><a href=\"#8-6-原子数组\" class=\"headerlink\" title=\"8.6 原子数组\"></a>8.6 原子数组</h5><ul>\n<li><p>AtomicIntegerArray </p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> 参数1，提供数组、可以是线程不安全数组或线程安全数组</span></span><br><span class=\"line\"><span class=\"comment\"> 参数2，获取数组长度的方法</span></span><br><span class=\"line\"><span class=\"comment\"> 参数3，自增方法，回传 array, index</span></span><br><span class=\"line\"><span class=\"comment\"> 参数4，打印数组的方法</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"keyword\">void</span> <span class=\"title function_\">demo</span><span class=\"params\">(Supplier&lt;T&gt; arraySupplier,</span></span><br><span class=\"line\"><span class=\"params\">                                Function&lt;T, Integer&gt; lengthFun,</span></span><br><span class=\"line\"><span class=\"params\">                                BiConsumer&lt;T, Integer&gt; putConsumer,</span></span><br><span class=\"line\"><span class=\"params\">                                Consumer&lt;T&gt; printConsumer )</span> &#123;</span><br><span class=\"line\">    List&lt;Thread&gt; ts = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">    <span class=\"type\">T</span> <span class=\"variable\">array</span> <span class=\"operator\">=</span> arraySupplier.get();  <span class=\"comment\">// 获取数组</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">length</span> <span class=\"operator\">=</span> lengthFun.apply(array);  <span class=\"comment\">// // 获取数组长度</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 每个线程对数组作 10000 次操作</span></span><br><span class=\"line\">        ts.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; <span class=\"number\">10000</span>; j++) &#123;</span><br><span class=\"line\">                putConsumer.accept(array, j%length);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ts.forEach(t -&gt; t.start()); <span class=\"comment\">// 启动所有线程</span></span><br><span class=\"line\">    ts.forEach(t -&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            t.join();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;); <span class=\"comment\">// 等所有线程结束</span></span><br><span class=\"line\">    printConsumer.accept(array);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>  安全使用AtomicIntegerArray</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">demo(</span><br><span class=\"line\">    ()-&gt; <span class=\"keyword\">new</span> <span class=\"title class_\">AtomicIntegerArray</span>(<span class=\"number\">10</span>),</span><br><span class=\"line\">    (array) -&gt; array.length(),</span><br><span class=\"line\">    (array, index) -&gt; array.getAndIncrement(index),</span><br><span class=\"line\">    array -&gt; System.out.println(array)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>  <strong>Supplier、Function、Consumer</strong></p>\n<ul>\n<li>supplier 提供者 无中生有 ()-&gt;结果 </li>\n<li>function 函数 一个参数一个结果 (参数)-&gt;结果 , BiFunction (参数1,参数2)-&gt;结果 </li>\n<li>consumer 消费者 一个参数没结果 (参数)-&gt;void, BiConsumer (参数1,参数2)-&gt;void</li>\n</ul>\n</li>\n<li><p>AtomicLongArray </p>\n</li>\n<li><p>AtomicReferenceArray</p>\n</li>\n</ul>\n<h5 id=\"8-7-字段更新器\"><a href=\"#8-7-字段更新器\" class=\"headerlink\" title=\"8.7 字段更新器\"></a>8.7 字段更新器</h5><blockquote>\n<p>利用字段更新器，可以针对对象的某个域（Field）进行原子操作，只能配合 volatile 修饰的字段使用，否则会抛出 异常</p>\n</blockquote>\n<ul>\n<li><p>AtomicReferenceFieldUpdater &#x2F;&#x2F; 域 字段 </p>\n</li>\n<li><p>AtomicIntegerFieldUpdater </p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test5</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"type\">int</span> field;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">AtomicIntegerFieldUpdater</span> <span class=\"variable\">fieldUpdater</span> <span class=\"operator\">=</span> AtomicIntegerFieldUpdater.newUpdater(Test5.class, <span class=\"string\">&quot;field&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Test5</span> <span class=\"variable\">test5</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Test5</span>();</span><br><span class=\"line\">        <span class=\"comment\">// 修改成功 field = 10</span></span><br><span class=\"line\">        fieldUpdater.compareAndSet(test5, <span class=\"number\">0</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 修改成功 field = 20</span></span><br><span class=\"line\">        fieldUpdater.compareAndSet(test5, <span class=\"number\">10</span>, <span class=\"number\">20</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 修改失败 field = 20</span></span><br><span class=\"line\">        fieldUpdater.compareAndSet(test5, <span class=\"number\">10</span>, <span class=\"number\">30</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>AtomicLongFieldUpdater</p>\n</li>\n</ul>\n<h5 id=\"8-8-原子累加器\"><a href=\"#8-8-原子累加器\" class=\"headerlink\" title=\"8.8 原子累加器\"></a>8.8 原子累加器</h5><blockquote>\n<p>LongAddr 性能提升的原因，在有竞争时，设置多个累加单元，Therad-0 累加 Cell[0]，而 Thread-1 累加 Cell[1]… 最后将结果汇总。这样它们在累加时操作的不同的 Cell 变量，因此减少了 CAS 重试失败，从而提高性能。累加单元小于CPU核心数量，否则无意义。</p>\n</blockquote>\n<ol>\n<li><p>基本用法</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"keyword\">void</span> <span class=\"title function_\">demo</span><span class=\"params\">(Supplier&lt;T&gt; adderSupplier, Consumer&lt;T&gt; action)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">T</span> <span class=\"variable\">adder</span> <span class=\"operator\">=</span> adderSupplier.get();</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"variable\">start</span> <span class=\"operator\">=</span> System.nanoTime();</span><br><span class=\"line\">    List&lt;Thread&gt; ts = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">    <span class=\"comment\">// 4 个线程，每人累加 50 万</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">40</span>; i++) &#123;</span><br><span class=\"line\">        ts.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; <span class=\"number\">500000</span>; j++) &#123;</span><br><span class=\"line\">                action.accept(adder);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ts.forEach(t -&gt; t.start());</span><br><span class=\"line\">    ts.forEach(t -&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            t.join();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();&#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"variable\">end</span> <span class=\"operator\">=</span> System.nanoTime();</span><br><span class=\"line\">    System.out.println(adder + <span class=\"string\">&quot; cost:&quot;</span> + (end - start)/<span class=\"number\">1000_000</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// LongAddr与AtomicLong的比较</span></span><br><span class=\"line\"><span class=\"comment\">// LongAddr的速度大概是AtomicLong的4到5倍</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">    demo(() -&gt; <span class=\"keyword\">new</span> <span class=\"title class_\">LongAdder</span>(), adder -&gt; adder.increment());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">    demo(() -&gt; <span class=\"keyword\">new</span> <span class=\"title class_\">AtomicLong</span>(), adder -&gt; adder.getAndIncrement());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>LongAddr关键域</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 累加单元数组, 懒惰初始化，数组长度小于CPU核心数</span></span><br><span class=\"line\"><span class=\"keyword\">transient</span> <span class=\"keyword\">volatile</span> Cell[] cells;</span><br><span class=\"line\"><span class=\"comment\">// 基础值, 如果没有竞争, 则用 cas 累加这个域</span></span><br><span class=\"line\"><span class=\"keyword\">transient</span> <span class=\"keyword\">volatile</span> <span class=\"type\">long</span> base;</span><br><span class=\"line\"><span class=\"comment\">// 在 cells 创建或扩容时, 置为 1, 表示加锁</span></span><br><span class=\"line\"><span class=\"keyword\">transient</span> <span class=\"keyword\">volatile</span> <span class=\"type\">int</span> cellsBusy;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Cell 累加单元</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 防止缓存行伪共享</span></span><br><span class=\"line\"><span class=\"meta\">@sun</span>.misc.Contended</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Cell</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> <span class=\"type\">long</span> value;</span><br><span class=\"line\">    Cell(<span class=\"type\">long</span> x) &#123; value = x; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 最重要的方法, 用来 cas 方式进行累加, prev 表示旧值, next 表示新值</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"title function_\">cas</span><span class=\"params\">(<span class=\"type\">long</span> prev, <span class=\"type\">long</span> next)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// UNSAFE为unsafe对象</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> UNSAFE.compareAndSwapLong(<span class=\"built_in\">this</span>, valueOffset, prev, next);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 省略不重要代码</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>@sun.misc.Contended 防止缓存伪共享</p>\n<p><img src=\"/JUC/Cell%E4%BC%AA%E5%85%B1%E4%BA%AB.png\"></p>\n<p>缓存以缓存行为单位，每个缓存行对应着一块内存，一般是 64 byte（8 个 long） 缓存的加入会造成数据副本的产生，即同一份数据会缓存在不同核心的缓存行中 CPU 要保证数据的一致性，如果某个 CPU 核心更改了数据，其它 CPU 核心对应的整个缓存行必须失效</p>\n<p>Cell 是数组形式，在内存中是连续存储的，一个 Cell 为 24 字节（16 字节的对象头和 8 字节的 value），因此缓存行可以存下 2 个的 Cell 对象。所以无论谁修改成功，都会导致对方 Core 的缓存行失效。</p>\n<p>@sun.misc.Contended 原理，在使用此注解的对象或字段的前后各增加 128 字节大小的 padding，从而让 CPU 将对象预读至缓存时占用不同的缓存行，使得不会造成对方缓存行的失效</p>\n</blockquote>\n</li>\n<li><p>关键累加方法 add</p>\n<p> add流程图</p>\n<p> <img src=\"/JUC/add%E6%B5%81%E7%A8%8B%E5%9B%BE.png\"></p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">add</span><span class=\"params\">(<span class=\"type\">long</span> x)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// as 为累加单元数组</span></span><br><span class=\"line\">    <span class=\"comment\">// b 为基础值</span></span><br><span class=\"line\">    <span class=\"comment\">// x 为累加值</span></span><br><span class=\"line\">    Cell[] as; <span class=\"type\">long</span> b, v; <span class=\"type\">int</span> m; Cell a;</span><br><span class=\"line\">    <span class=\"comment\">// 进入 if 的两个条件</span></span><br><span class=\"line\">    <span class=\"comment\">// 1. as 有值, 表示已经发生过竞争, 进入 if</span></span><br><span class=\"line\">    <span class=\"comment\">// 2. cas 给 base 累加时失败了, 表示 base 发生了竞争, 进入 if</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((as = cells) != <span class=\"literal\">null</span> || !casBase(b = base, b + x)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// uncontended 表示 cell 没有竞争</span></span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">uncontended</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (</span><br><span class=\"line\">            <span class=\"comment\">// as 还没有创建</span></span><br><span class=\"line\">            as == <span class=\"literal\">null</span> || (m = as.length - <span class=\"number\">1</span>) &lt; <span class=\"number\">0</span> ||</span><br><span class=\"line\">            <span class=\"comment\">// 当前线程对应的 cell 还没有</span></span><br><span class=\"line\">            (a = as[getProbe() &amp; m]) == <span class=\"literal\">null</span> ||</span><br><span class=\"line\">            <span class=\"comment\">// cas 给当前线程的 cell 累加失败 uncontended=false ( a 为当前线程的 cell )</span></span><br><span class=\"line\">            !(uncontended = a.cas(v = a.value, v + x))</span><br><span class=\"line\">        ) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 进入 cell 数组创建、cell 创建的流程</span></span><br><span class=\"line\">            longAccumulate(x, <span class=\"literal\">null</span>, uncontended);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>创建&amp;扩容 累加单元Cell数组方法 longAccumulate()*</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\t\t\t\t  <span class=\"comment\">// x 累加值                    wasUncontended cell 是否存在竞争</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title function_\">longAccumulate</span><span class=\"params\">(<span class=\"type\">long</span> x, LongBinaryOperator fn,<span class=\"type\">boolean</span> wasUncontended)</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h5 id=\"8-9-Unsafe\"><a href=\"#8-9-Unsafe\" class=\"headerlink\" title=\"8.9 Unsafe\"></a>8.9 Unsafe</h5><blockquote>\n<p>Unsafe 对象提供了非常底层的，操作内存、线程的方法，Unsafe 对象不能直接调用，只能通过反射获得</p>\n</blockquote>\n<ol>\n<li><p>unsafe对象获取</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UnsafeAccessor</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> Unsafe unsafe;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123; </span><br><span class=\"line\">            <span class=\"type\">Field</span> <span class=\"variable\">theUnsafe</span> <span class=\"operator\">=</span> Unsafe.class.getDeclaredField(<span class=\"string\">&quot;theUnsafe&quot;</span>);  <span class=\"comment\">// 获取Unsafe所有field</span></span><br><span class=\"line\">            theUnsafe.setAccessible(<span class=\"literal\">true</span>);  <span class=\"comment\">// 设置私有field可访问</span></span><br><span class=\"line\">            unsafe = (Unsafe) theUnsafe.get(<span class=\"literal\">null</span>);  <span class=\"comment\">// 获得unsafe对象</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (NoSuchFieldException | IllegalAccessException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> Unsafe <span class=\"title function_\">getUnsafe</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> unsafe;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Unsafe CAS操作</p>\n<ul>\n<li><p>cas主要方法</p>\n<ul>\n<li><p>compareAndSwapInt</p>\n</li>\n<li><p>compareAndSwapLong</p>\n</li>\n<li><p>compareAndSwapObject</p>\n</li>\n</ul>\n</li>\n<li><p>cas 示例</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Student</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> <span class=\"type\">int</span> id;</span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> String name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Unsafe</span> <span class=\"variable\">unsafe</span> <span class=\"operator\">=</span> UnsafeAccessor.getUnsafe();</span><br><span class=\"line\"><span class=\"type\">Field</span> <span class=\"variable\">id</span> <span class=\"operator\">=</span> Student.class.getDeclaredField(<span class=\"string\">&quot;id&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">Field</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> Student.class.getDeclaredField(<span class=\"string\">&quot;name&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 获得成员变量的偏移量 objectFieldOffset</span></span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"variable\">idOffset</span> <span class=\"operator\">=</span> UnsafeAccessor.unsafe.objectFieldOffset(id);</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"variable\">nameOffset</span> <span class=\"operator\">=</span> UnsafeAccessor.unsafe.objectFieldOffset(name);</span><br><span class=\"line\"><span class=\"type\">Student</span> <span class=\"variable\">student</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Student</span>();</span><br><span class=\"line\"><span class=\"comment\">// 使用 cas 方法替换成员变量的值</span></span><br><span class=\"line\">UnsafeAccessor.unsafe.compareAndSwapInt(student, idOffset, <span class=\"number\">0</span>, <span class=\"number\">20</span>); <span class=\"comment\">// 返回 true</span></span><br><span class=\"line\">UnsafeAccessor.unsafe.compareAndSwapObject(student, nameOffset, <span class=\"literal\">null</span>, <span class=\"string\">&quot;张三&quot;</span>); <span class=\"comment\">// 返回 true</span></span><br><span class=\"line\">System.out.println(student);</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ol>\n<h4 id=\"九、共享模型之不可变\"><a href=\"#九、共享模型之不可变\" class=\"headerlink\" title=\"九、共享模型之不可变\"></a>九、共享模型之不可变</h4><h5 id=\"9-1-日期转换之不可变对象\"><a href=\"#9-1-日期转换之不可变对象\" class=\"headerlink\" title=\"9.1 日期转换之不可变对象\"></a>9.1 日期转换之不可变对象</h5><ul>\n<li><p>SimpleDateFormat 线程不安全</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">SimpleDateFormat</span> <span class=\"variable\">sdf</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleDateFormat</span>(<span class=\"string\">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 存在抛出java.lang.NumberFormatException 或者 出现不正确的日期解析结果</span></span><br><span class=\"line\">            log.debug(<span class=\"string\">&quot;&#123;&#125;&quot;</span>, sdf.parse(<span class=\"string\">&quot;1951-04-21&quot;</span>));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            log.error(<span class=\"string\">&quot;&#123;&#125;&quot;</span>, e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;).start();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>DateTimeFormatter 线程安全</p>\n<blockquote>\n<p>对象在不能够修改其内部状态（属性）</p>\n</blockquote>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">DateTimeFormatter</span> <span class=\"variable\">dtf</span> <span class=\"operator\">=</span> DateTimeFormatter.ofPattern(<span class=\"string\">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">        <span class=\"type\">LocalDate</span> <span class=\"variable\">date</span> <span class=\"operator\">=</span> dtf.parse(<span class=\"string\">&quot;2018-10-01&quot;</span>, LocalDate::from);</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;&#123;&#125;&quot;</span>, date);</span><br><span class=\"line\">    &#125;).start();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"9-2-不可变设计\"><a href=\"#9-2-不可变设计\" class=\"headerlink\" title=\"9.2 不可变设计\"></a>9.2 不可变设计</h5><ul>\n<li><p>String的不可变设计</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">String</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">java</span>.io.Serializable, Comparable&lt;String&gt;, CharSequence &#123;</span><br><span class=\"line\">    <span class=\"comment\">/** The value is used for character storage. */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">char</span> value[];</span><br><span class=\"line\">    <span class=\"comment\">/** Cache the hash code for the string */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> hash; <span class=\"comment\">// Default to 0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<ul>\n<li><p>final的使用</p>\n<ul>\n<li>该类、类中所有属性都使用 final 修饰</li>\n<li>属性用 final 修饰保证了该属性是只读的，不能修改</li>\n<li>类用 final 修饰保证了该类中的方法不能被覆盖，防止子类无意间破坏不可变性</li>\n</ul>\n</li>\n<li><p>保护性拷贝</p>\n<blockquote>\n<p>value[] 使用final修饰仅保证其数组引用地址不变，String使用重现创建value[]对象拷贝原有值避免共享 实现其值的不可变性</p>\n</blockquote>\n<ul>\n<li><p>substring</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">substring</span><span class=\"params\">(<span class=\"type\">int</span> beginIndex)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (beginIndex &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringIndexOutOfBoundsException</span>(beginIndex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">subLen</span> <span class=\"operator\">=</span> value.length - beginIndex;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (subLen &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringIndexOutOfBoundsException</span>(subLen);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    \t\t\t\t\t\t\t\t <span class=\"comment\">// 调用构造方法重新创建对象 </span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (beginIndex == <span class=\"number\">0</span>) ? <span class=\"built_in\">this</span> : <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(value, beginIndex, subLen);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">                                </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">String</span><span class=\"params\">(<span class=\"type\">char</span> value[], <span class=\"type\">int</span> offset, <span class=\"type\">int</span> count)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (offset &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringIndexOutOfBoundsException</span>(offset);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (count &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (count &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringIndexOutOfBoundsException</span>(count);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (offset &lt;= value.length) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.value = <span class=\"string\">&quot;&quot;</span>.value;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (offset &gt; value.length - count) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringIndexOutOfBoundsException</span>(offset + count);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 将原有值进行拷贝</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.value = Arrays.copyOfRange(value, offset, offset+count);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<h5 id=\"9-3-享元模式\"><a href=\"#9-3-享元模式\" class=\"headerlink\" title=\"9.3 享元模式\"></a>9.3 <u><em>享元模式</em></u></h5><blockquote>\n<p>Flyweight pattern.需要重用数量有限的同一类对象 可解决类的不可变设计导致多次创建对象，形成的资源浪费问题</p>\n</blockquote>\n<ol>\n<li><p>包装类</p>\n<blockquote>\n<p>在JDK中 Boolean，Byte，Short，Integer，Long，Character 等包装类提供了 valueOf 方法</p>\n<p>例如 Long 的 valueOf 会缓存 -128~127 之间的 Long 对象，在这个范围之间会重用对象，大于这个范围，才会新建 Long 对 象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Long <span class=\"title function_\">valueOf</span><span class=\"params\">(<span class=\"type\">long</span> l)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">offset</span> <span class=\"operator\">=</span> <span class=\"number\">128</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l &gt;= -<span class=\"number\">128</span> &amp;&amp; l &lt;= <span class=\"number\">127</span>) &#123; <span class=\"comment\">// LongCache中创建了-128~127 之间的 Long 对象数组</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> LongCache.cache[(<span class=\"type\">int</span>)l + offset];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Long</span>(l);  <span class=\"comment\">// 大于范围才创建</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Byte, Short, Long 缓存的范围都是 -128~127 </li>\n<li>Character 缓存的范围是 0~127 </li>\n<li>Integer的默认范围是 -128~127 最小值不能变 但最大值可以通过调整虚拟机参数 <code>  -Djava.lang.Integer.IntegerCache.high</code> 来改变 </li>\n<li>Boolean 缓存了 TRUE 和 FALSE</li>\n</ul>\n</blockquote>\n</li>\n<li><p>String 串池</p>\n</li>\n<li><p>BigDecimal&amp;BigInteger</p>\n</li>\n<li><p>DIY数据库连接池</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Pool</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1. 连接池大小</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> poolSize;</span><br><span class=\"line\">    <span class=\"comment\">// 2. 连接对象数组</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Connection[] connections;</span><br><span class=\"line\">    <span class=\"comment\">// 3. 连接状态数组 0 表示空闲， 1 表示繁忙</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> AtomicIntegerArray states;</span><br><span class=\"line\">    <span class=\"comment\">// 4. 构造方法初始化</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Pool</span><span class=\"params\">(<span class=\"type\">int</span> poolSize)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.poolSize = poolSize;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.connections = <span class=\"keyword\">new</span> <span class=\"title class_\">Connection</span>[poolSize];</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.states = <span class=\"keyword\">new</span> <span class=\"title class_\">AtomicIntegerArray</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[poolSize]);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; poolSize; i++) &#123;</span><br><span class=\"line\">            connections[i] = <span class=\"keyword\">new</span> <span class=\"title class_\">MockConnection</span>(<span class=\"string\">&quot;连接&quot;</span> + (i+<span class=\"number\">1</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 5. 借连接</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Connection <span class=\"title function_\">borrow</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; poolSize; i++) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 获取空闲连接</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(states.get(i) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (states.compareAndSet(i, <span class=\"number\">0</span>, <span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">                        log.debug(<span class=\"string\">&quot;borrow &#123;&#125;&quot;</span>, connections[i]);</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> connections[i];</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 如果没有空闲连接，当前线程进入等待</span></span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (<span class=\"built_in\">this</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    log.debug(<span class=\"string\">&quot;wait...&quot;</span>);</span><br><span class=\"line\">                    <span class=\"built_in\">this</span>.wait();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 6. 归还连接</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">free</span><span class=\"params\">(Connection conn)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; poolSize; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (connections[i] == conn) &#123;</span><br><span class=\"line\">                states.set(i, <span class=\"number\">0</span>);</span><br><span class=\"line\">                <span class=\"keyword\">synchronized</span> (<span class=\"built_in\">this</span>) &#123;</span><br><span class=\"line\">                    log.debug(<span class=\"string\">&quot;free &#123;&#125;&quot;</span>, conn);</span><br><span class=\"line\">                    <span class=\"built_in\">this</span>.notifyAll();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MockConnection</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Connection</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 实现略</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用数据库连接池</span></span><br><span class=\"line\"><span class=\"type\">Pool</span> <span class=\"variable\">pool</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Pool</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">        <span class=\"type\">Connection</span> <span class=\"variable\">conn</span> <span class=\"operator\">=</span> pool.borrow();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"keyword\">new</span> <span class=\"title class_\">Random</span>().nextInt(<span class=\"number\">1000</span>));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        pool.free(conn);  <span class=\"comment\">// 应在finaly中调用，保证释放连接</span></span><br><span class=\"line\">    &#125;).start();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>补充问题</p>\n<ul>\n<li>连接的动态增长与收缩 </li>\n<li>连接保活（可用性检测） </li>\n<li>等待超时处理 </li>\n<li>分布式 hash</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<h5 id=\"9-4-final原理\"><a href=\"#9-4-final原理\" class=\"headerlink\" title=\"9.4 final原理\"></a>9.4 final原理</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestFinal</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">20</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 字节码</span></span><br><span class=\"line\"><span class=\"number\">0</span>: aload_0</span><br><span class=\"line\"><span class=\"number\">1</span>: invokespecial #<span class=\"number\">1</span> <span class=\"comment\">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class=\"line\"><span class=\"number\">4</span>: aload_0</span><br><span class=\"line\"><span class=\"number\">5</span>: bipush <span class=\"number\">20</span></span><br><span class=\"line\"><span class=\"number\">7</span>: putfield #<span class=\"number\">2</span> <span class=\"comment\">// Field a:I</span></span><br><span class=\"line\"> &lt;-- 写屏障</span><br><span class=\"line\"><span class=\"number\">10</span>: <span class=\"keyword\">return</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>与volatile类似，加入写屏保证在该屏障之前的，对共享变量的改动，都同步到主存当中。确保指令重排序时，不会将写屏障之前的代码排在写屏障之后。使得在其它线程读到 它的值时不会出现为 0 的情况</p>\n<p>读取时会将较小的final值复制到其方法栈中，较大数值会复制到该类的常量池中，相对于在堆中读取的速度大幅增强</p>\n</blockquote>\n<h5 id=\"9-5-无状态\"><a href=\"#9-5-无状态\" class=\"headerlink\" title=\"9.5 无状态\"></a>9.5 无状态</h5><blockquote>\n<p>因为成员变量保存的数据也可以称为状态信息，因此没有成员变量就称之为【无状态】</p>\n<p>例如：在 web 阶段学习时，设计 Servlet 时为了保证其线程安全，都会有这样的建议，不要为 Servlet 设置成员变量，这种没有任何成员变量的类是线程安全的</p>\n</blockquote>\n<h4 id=\"十、共享模型之工具\"><a href=\"#十、共享模型之工具\" class=\"headerlink\" title=\"十、共享模型之工具\"></a>十、共享模型之工具</h4><h5 id=\"8-1-自定义线程池\"><a href=\"#8-1-自定义线程池\" class=\"headerlink\" title=\"8.1 自定义线程池\"></a>8.1 自定义线程池</h5><p><img src=\"/JUC/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BA%BF%E7%A8%8B%E6%B1%A0.png\"></p>\n<ol>\n<li><p>自定义拒绝策略接口</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span> <span class=\"comment\">// 拒绝策略</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">RejectPolicy</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">reject</span><span class=\"params\">(BlockingQueue&lt;T&gt; queue, T task)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>自定义任务队列</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">BlockingQueue</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1. 任务队列</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Deque&lt;T&gt; queue = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayDeque</span>&lt;&gt;();</span><br><span class=\"line\">    <span class=\"comment\">// 2. 锁</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">ReentrantLock</span> <span class=\"variable\">lock</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ReentrantLock</span>();</span><br><span class=\"line\">    <span class=\"comment\">// 3. 生产者条件变量</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">Condition</span> <span class=\"variable\">fullWaitSet</span> <span class=\"operator\">=</span> lock.newCondition();</span><br><span class=\"line\">    <span class=\"comment\">// 4. 消费者条件变量</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">Condition</span> <span class=\"variable\">emptyWaitSet</span> <span class=\"operator\">=</span> lock.newCondition();</span><br><span class=\"line\">    <span class=\"comment\">// 5. 容量</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> capcity;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">BlockingQueue</span><span class=\"params\">(<span class=\"type\">int</span> capcity)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.capcity = capcity;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 带超时阻塞获取</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> T <span class=\"title function_\">poll</span><span class=\"params\">(<span class=\"type\">long</span> timeout, TimeUnit unit)</span> &#123;</span><br><span class=\"line\">        lock.lock();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 将 timeout 统一转换为 纳秒</span></span><br><span class=\"line\">            <span class=\"type\">long</span> <span class=\"variable\">nanos</span> <span class=\"operator\">=</span> unit.toNanos(timeout);</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (queue.isEmpty()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 返回值是剩余时间</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (nanos &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    nanos = emptyWaitSet.awaitNanos(nanos);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"type\">T</span> <span class=\"variable\">t</span> <span class=\"operator\">=</span> queue.removeFirst();</span><br><span class=\"line\">            fullWaitSet.signal();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> t;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            lock.unlock();</span><br><span class=\"line\">        &#125;&#125;</span><br><span class=\"line\">    <span class=\"comment\">// 阻塞获取</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> T <span class=\"title function_\">take</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        lock.lock();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (queue.isEmpty()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    emptyWaitSet.await();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"type\">T</span> <span class=\"variable\">t</span> <span class=\"operator\">=</span> queue.removeFirst();</span><br><span class=\"line\">            fullWaitSet.signal();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> t;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            lock.unlock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 阻塞添加</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">put</span><span class=\"params\">(T task)</span> &#123;</span><br><span class=\"line\">        lock.lock();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (queue.size() == capcity) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    log.debug(<span class=\"string\">&quot;等待加入任务队列 &#123;&#125; ...&quot;</span>, task);</span><br><span class=\"line\">                    fullWaitSet.await();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            log.debug(<span class=\"string\">&quot;加入任务队列 &#123;&#125;&quot;</span>, task);</span><br><span class=\"line\">            queue.addLast(task);</span><br><span class=\"line\">            emptyWaitSet.signal();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            lock.unlock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 带超时时间阻塞添加</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">offer</span><span class=\"params\">(T task, <span class=\"type\">long</span> timeout, TimeUnit timeUnit)</span> &#123;</span><br><span class=\"line\">        lock.lock();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">long</span> <span class=\"variable\">nanos</span> <span class=\"operator\">=</span> timeUnit.toNanos(timeout);</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (queue.size() == capcity) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(nanos &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    log.debug(<span class=\"string\">&quot;等待加入任务队列 &#123;&#125; ...&quot;</span>, task);</span><br><span class=\"line\">                    nanos = fullWaitSet.awaitNanos(nanos);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            log.debug(<span class=\"string\">&quot;加入任务队列 &#123;&#125;&quot;</span>, task);</span><br><span class=\"line\">            queue.addLast(task);</span><br><span class=\"line\">            emptyWaitSet.signal();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            lock.unlock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">size</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        lock.lock();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> queue.size();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            lock.unlock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">tryPut</span><span class=\"params\">(RejectPolicy&lt;T&gt; rejectPolicy, T task)</span> &#123;</span><br><span class=\"line\">        lock.lock();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 判断队列是否满</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(queue.size() == capcity) &#123;</span><br><span class=\"line\">                rejectPolicy.reject(<span class=\"built_in\">this</span>, task);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 有空闲</span></span><br><span class=\"line\">                log.debug(<span class=\"string\">&quot;加入任务队列 &#123;&#125;&quot;</span>, task);</span><br><span class=\"line\">                queue.addLast(task);</span><br><span class=\"line\">                emptyWaitSet.signal();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            lock.unlock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>自定义线程池</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ThreadPool</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 任务队列</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> BlockingQueue&lt;Runnable&gt; taskQueue;</span><br><span class=\"line\">    <span class=\"comment\">// 线程集合</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> HashSet&lt;Worker&gt; workers = <span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>&lt;&gt;();</span><br><span class=\"line\">    <span class=\"comment\">// 核心线程数</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> coreSize;</span><br><span class=\"line\">    <span class=\"comment\">// 获取任务时的超时时间</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">long</span> timeout;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> TimeUnit timeUnit;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> RejectPolicy&lt;Runnable&gt; rejectPolicy;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ThreadPool</span><span class=\"params\">(<span class=\"type\">int</span> coreSize, <span class=\"type\">long</span> timeout, TimeUnit timeUnit, <span class=\"type\">int</span> queueCapcity, </span></span><br><span class=\"line\"><span class=\"params\">                      RejectPolicy&lt;Runnable&gt; rejectPolicy)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.coreSize = coreSize;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.timeout = timeout;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.timeUnit = timeUnit;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.taskQueue = <span class=\"keyword\">new</span> <span class=\"title class_\">BlockingQueue</span>&lt;&gt;(queueCapcity);</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.rejectPolicy = rejectPolicy;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 执行任务</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">(Runnable task)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 当任务数没有超过 coreSize 时，直接交给 worker 对象执行</span></span><br><span class=\"line\">        <span class=\"comment\">// 如果任务数超过 coreSize 时，加入任务队列暂存</span></span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (workers) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(workers.size() &lt; coreSize) &#123;</span><br><span class=\"line\">                <span class=\"type\">Worker</span> <span class=\"variable\">worker</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Worker</span>(task);</span><br><span class=\"line\">                log.debug(<span class=\"string\">&quot;新增 worker&#123;&#125;, &#123;&#125;&quot;</span>, worker, task);</span><br><span class=\"line\">                workers.add(worker);</span><br><span class=\"line\">                worker.start();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// taskQueue.put(task);</span></span><br><span class=\"line\">                <span class=\"comment\">// 1) 死等</span></span><br><span class=\"line\">                <span class=\"comment\">// 2) 带超时等待</span></span><br><span class=\"line\">                <span class=\"comment\">// 3) 让调用者放弃任务执行</span></span><br><span class=\"line\">                <span class=\"comment\">// 4) 让调用者抛出异常</span></span><br><span class=\"line\">                <span class=\"comment\">// 5) 让调用者自己执行任务</span></span><br><span class=\"line\">                taskQueue.tryPut(rejectPolicy, task);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title class_\">Worker</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Thread</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Runnable task;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"title function_\">Worker</span><span class=\"params\">(Runnable task)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.task = task;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 执行任务</span></span><br><span class=\"line\">            <span class=\"comment\">// 1) 当 task 不为空，执行任务</span></span><br><span class=\"line\">            <span class=\"comment\">// 2) 当 task 执行完毕，再接着从任务队列获取任务并执行</span></span><br><span class=\"line\">            <span class=\"comment\">// while(task != null || (task = taskQueue.take()) != null) &#123;</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span>(task != <span class=\"literal\">null</span> || (task = taskQueue.poll(timeout, timeUnit)) != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    log.debug(<span class=\"string\">&quot;正在执行...&#123;&#125;&quot;</span>, task);</span><br><span class=\"line\">                    task.run();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                    task = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (workers) &#123;</span><br><span class=\"line\">                log.debug(<span class=\"string\">&quot;worker 被移除&#123;&#125;&quot;</span>, <span class=\"built_in\">this</span>);</span><br><span class=\"line\">                workers.remove(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>测试</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">ThreadPool</span> <span class=\"variable\">threadPool</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadPool</span>(<span class=\"number\">1</span>, <span class=\"number\">1000</span>, TimeUnit.MILLISECONDS, <span class=\"number\">1</span>, (queue, task)-&gt;&#123;</span><br><span class=\"line\">                                               <span class=\"comment\">// 1. 死等</span></span><br><span class=\"line\">                                               <span class=\"comment\">// queue.put(task);</span></span><br><span class=\"line\">                                               <span class=\"comment\">// 2) 带超时等待</span></span><br><span class=\"line\">                                               <span class=\"comment\">// queue.offer(task, 1500, TimeUnit.MILLISECONDS);</span></span><br><span class=\"line\">                                               <span class=\"comment\">// 3) 让调用者放弃任务执行</span></span><br><span class=\"line\">                                               <span class=\"comment\">// log.debug(&quot;放弃&#123;&#125;&quot;, task);</span></span><br><span class=\"line\">                                               <span class=\"comment\">// 4) 让调用者抛出异常</span></span><br><span class=\"line\">                                               <span class=\"comment\">// throw new RuntimeException(&quot;任务执行失败 &quot; + task);</span></span><br><span class=\"line\">                                               <span class=\"comment\">// 5) 让调用者自己执行任务</span></span><br><span class=\"line\">                                               task.run();</span><br><span class=\"line\">                                           &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> i;</span><br><span class=\"line\">        threadPool.execute(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">1000L</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            log.debug(<span class=\"string\">&quot;&#123;&#125;&quot;</span>, j);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h5 id=\"8-2-线程池-异步模式之工作线程\"><a href=\"#8-2-线程池-异步模式之工作线程\" class=\"headerlink\" title=\"8.2 线程池  异步模式之工作线程\"></a>8.2 线程池  <u><em>异步模式之工作线程</em></u></h5><p><img src=\"/2023/03/07/JUC/JDK-ExecutorService.png\"></p>\n<ol>\n<li><p>线程池状态</p>\n<blockquote>\n<p>ThreadPoolExecutor 使用 int 的高 3 位来表示线程池状态，低 29 位表示线程数量</p>\n<p>信息存储在一个原子变量 ctl 中，目的是将线程池状态与线程个数合二为一，这样就可以用一次 cas 原子操作进行赋值</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// c 为旧值， ctlOf 返回结果为新值</span></span><br><span class=\"line\">ctl.compareAndSet(c, ctlOf(targetState, workerCountOf(c))));</span><br><span class=\"line\"><span class=\"comment\">// rs 为高 3 位代表线程池状态， wc 为低 29 位代表线程个数，ctl 是合并它们</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">ctlOf</span><span class=\"params\">(<span class=\"type\">int</span> rs, <span class=\"type\">int</span> wc)</span> &#123; <span class=\"keyword\">return</span> rs | wc; &#125;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th align=\"center\">状态名</th>\n<th align=\"center\">高 3  位</th>\n<th align=\"center\">接收新任务</th>\n<th align=\"center\">处理阻塞队列任 务</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">RUNNING</td>\n<td align=\"center\">111</td>\n<td align=\"center\">Y</td>\n<td align=\"center\">Y</td>\n<td></td>\n</tr>\n<tr>\n<td align=\"center\">SHUTDOWN</td>\n<td align=\"center\">000</td>\n<td align=\"center\">N</td>\n<td align=\"center\">Y</td>\n<td>不会接收新任务，但会处理阻塞队列剩余任务</td>\n</tr>\n<tr>\n<td align=\"center\">STOP</td>\n<td align=\"center\">001</td>\n<td align=\"center\">N</td>\n<td align=\"center\">N</td>\n<td>会中断正在执行的任务，并抛弃阻塞队列 任务</td>\n</tr>\n<tr>\n<td align=\"center\">TIDYING</td>\n<td align=\"center\">010</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td>任务全执行完毕，活动线程为 0 即将进入 终结</td>\n</tr>\n<tr>\n<td align=\"center\">TERMINATED</td>\n<td align=\"center\">011</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td></td>\n</tr>\n</tbody></table>\n</li>\n<li><p>构造方法</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">ThreadPoolExecutor</span><span class=\"params\">(<span class=\"type\">int</span> corePoolSize,  \t\t\t\t\t// 核心线程数目 (最多保留的线程数)</span></span><br><span class=\"line\">                          <span class=\"type\">int</span> maximumPoolSize,\t\t\t\t\t<span class=\"comment\">// 最大线程数目</span></span><br><span class=\"line\">                          <span class=\"type\">long</span> keepAliveTime,\t\t\t\t\t<span class=\"comment\">// 生存时间(针对救急线程)</span></span><br><span class=\"line\">                          TimeUnit unit,\t\t\t\t\t  \t<span class=\"comment\">// 时间单位(针对救急线程)</span></span><br><span class=\"line\">                          BlockingQueue&lt;Runnable&gt; workQueue,  \t<span class=\"comment\">// 阻塞队列</span></span><br><span class=\"line\">                          ThreadFactory threadFactory,\t\t  \t<span class=\"comment\">// 线程工厂 - 可以为线程创建时起个好名字</span></span><br><span class=\"line\">                          RejectedExecutionHandler handler)   \t<span class=\"comment\">// 拒绝策略</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>线程池中刚开始没有线程，当一个任务提交给线程池后，线程池创建一个新线程来执行任务。 </li>\n<li>当线程数达到 corePoolSize 并没有线程空闲，新加的任务会被加入workQueue 队列排队，自至有空闲的线程。 </li>\n<li>如果队列选择了有界队列，当任务超过了队列大小时，会创建 maximumPoolSize - corePoolSize 数目的线程的【救急线程】。 </li>\n<li>如果线程到达 maximumPoolSize 仍然有新任务这时会执行拒绝策略。</li>\n<li>超过corePoolSize 的救急线程如果一段时间没有任务做，需要结束节省资源，这个时间由 keepAliveTime 和 unit 来控制</li>\n</ul>\n<p> <img src=\"/2023/03/07/JUC/RejectedExecutionHandler.png\"></p>\n<ul>\n<li>AbortPolicy 让调用者抛出 RejectedExecutionException 异常，为默认策略</li>\n<li>CallerRunsPolicy 让调用者运行任务</li>\n<li>DiscardPolicy 放弃本次任务</li>\n<li>DiscardOldestPolicy 放弃队列中最早的任务，本任务取而代之</li>\n<li>其他实现<ul>\n<li>Dubbo 的实现，在抛出 RejectedExecutionException 异常之前会记录日志，并 dump 线程栈信息，方便定位问题</li>\n<li>Netty 的实现，是创建一个新线程来执行任务</li>\n<li>ActiveMQ 的实现，带超时等待（60s）尝试放入队列，类似我们之前自定义的拒绝策略</li>\n<li>PinPoint 的实现，它使用了一个拒绝策略链，会逐一尝试策略链中每种拒绝策略</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Executors</p>\n<ul>\n<li><p>newFixedThreadPool</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title function_\">newFixedThreadPool</span><span class=\"params\">(<span class=\"type\">int</span> nThreads)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadPoolExecutor</span>(nThreads, nThreads,</span><br><span class=\"line\">                                  <span class=\"number\">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class=\"line\">                                  <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedBlockingQueue</span>&lt;Runnable&gt;());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>核心线程数 &#x3D;&#x3D; 最大线程数（没有救急线程被创建），因此也无需超时时间</p>\n<p>阻塞队列是无界的，可以放任意数量的任务</p>\n<p>适用于任务量已知，相对耗时的任务</p>\n</blockquote>\n</li>\n<li><p>newCachedThreadPool</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title function_\">newCachedThreadPool</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadPoolExecutor</span>(<span class=\"number\">0</span>, Integer.MAX_VALUE,</span><br><span class=\"line\">                                  <span class=\"number\">60L</span>, TimeUnit.SECONDS,</span><br><span class=\"line\">                                  <span class=\"keyword\">new</span> <span class=\"title class_\">SynchronousQueue</span>&lt;Runnable&gt;());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>核心线程数是 0， 最大线程数是 Integer.MAX_VALUE，救急线程的空闲生存时间是 60s，全部都是救急线程（60s 后可以回收），救急线程可以无限创建。</p>\n<p>队列采用了 SynchronousQueue 实现，特点是它没有容量，没有线程来取是放不进去的（一手交钱、一手交货）</p>\n<p>整个线程池表现为线程数会根据任务量不断增长，没有上限，当任务执行完毕，空闲 1分钟后释放线程。 适合任务数比较密集，但每个任务执行时间较短的情况</p>\n</blockquote>\n</li>\n<li><p>newSingleThreadExecutor</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title function_\">newSingleThreadExecutor</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FinalizableDelegatedExecutorService</span></span><br><span class=\"line\">        (<span class=\"keyword\">new</span> <span class=\"title class_\">ThreadPoolExecutor</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>,</span><br><span class=\"line\">                                <span class=\"number\">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class=\"line\">                                <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedBlockingQueue</span>&lt;Runnable&gt;()));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>希望多个任务排队执行。线程数固定为 1，任务数多于 1 时，会放入无界队列排队。任务执行完毕，这唯一的线程 也不会被释放。</p>\n<p>与Executors.newFixedThreadPool(1)区别</p>\n<ul>\n<li><p>自己创建一个单线程串行执行任务，如果任务执行失败而终止那么没有任何补救措施，而线程池还会新建一 个线程，保证池的正常工作</p>\n</li>\n<li><p>Executors.newSingleThreadExecutor() 线程个数始终为1，不能修改</p>\n<blockquote>\n<p>FinalizableDelegatedExecutorService 应用的是装饰器模式，只对外暴露了 ExecutorService 接口，因 此不能调用 ThreadPoolExecutor 中特有的方法</p>\n</blockquote>\n</li>\n<li><p>Executors.newFixedThreadPool(1) 初始时为1，以后还可以修改</p>\n<blockquote>\n<p>对外暴露的是 ThreadPoolExecutor 对象，可以强转后调用 setCorePoolSize 等方法进行修改</p>\n</blockquote>\n</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>提交任务</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 执行任务</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">(Runnable command)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 提交任务 task，用返回值 Future 获得任务执行结果</span></span><br><span class=\"line\">&lt;T&gt; Future&lt;T&gt; <span class=\"title function_\">submit</span><span class=\"params\">(Callable&lt;T&gt; task)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 提交 tasks 中所有任务</span></span><br><span class=\"line\">&lt;T&gt; List&lt;Future&lt;T&gt;&gt; <span class=\"title function_\">invokeAll</span><span class=\"params\">(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks)</span></span><br><span class=\"line\">    <span class=\"keyword\">throws</span> InterruptedException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 提交 tasks 中所有任务，带超时时间</span></span><br><span class=\"line\">&lt;T&gt; List&lt;Future&lt;T&gt;&gt; <span class=\"title function_\">invokeAll</span><span class=\"params\">(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks,</span></span><br><span class=\"line\"><span class=\"params\">                              <span class=\"type\">long</span> timeout, TimeUnit unit)</span></span><br><span class=\"line\">    <span class=\"keyword\">throws</span> InterruptedException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 提交 tasks 中所有任务，哪个任务先成功执行完毕，返回此任务执行结果，其它任务取消</span></span><br><span class=\"line\">&lt;T&gt; T <span class=\"title function_\">invokeAny</span><span class=\"params\">(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks)</span></span><br><span class=\"line\">    <span class=\"keyword\">throws</span> InterruptedException, ExecutionException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 提交 tasks 中所有任务，哪个任务先成功执行完毕，返回此任务执行结果，其它任务取消，带超时时间</span></span><br><span class=\"line\">&lt;T&gt; T <span class=\"title function_\">invokeAny</span><span class=\"params\">(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks,</span></span><br><span class=\"line\"><span class=\"params\">                <span class=\"type\">long</span> timeout, TimeUnit unit)</span></span><br><span class=\"line\">    <span class=\"keyword\">throws</span> InterruptedException, ExecutionException, TimeoutException;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>关闭线程池</p>\n<ul>\n<li><p>void shutdown();</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">线程池状态变为 SHUTDOWN</span></span><br><span class=\"line\"><span class=\"comment\">不会接收新任务</span></span><br><span class=\"line\"><span class=\"comment\">但已提交任务会执行完</span></span><br><span class=\"line\"><span class=\"comment\">此方法不会阻塞调用线程的执行</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">shutdown</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">ReentrantLock</span> <span class=\"variable\">mainLock</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.mainLock;</span><br><span class=\"line\">    mainLock.lock();</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        checkShutdownAccess();</span><br><span class=\"line\">        <span class=\"comment\">// 修改线程池状态</span></span><br><span class=\"line\">        advanceRunState(SHUTDOWN);</span><br><span class=\"line\">        <span class=\"comment\">// 仅会打断空闲线程</span></span><br><span class=\"line\">        interruptIdleWorkers();</span><br><span class=\"line\">        onShutdown(); <span class=\"comment\">// 扩展点 ScheduledThreadPoolExecutor</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        mainLock.unlock();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 尝试终结(没有运行的线程可以立刻终结，如果还有运行的线程也不会等)</span></span><br><span class=\"line\">    tryTerminate();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>shutdownNow</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">线程池状态变为 STOP</span></span><br><span class=\"line\"><span class=\"comment\">- 不会接收新任务</span></span><br><span class=\"line\"><span class=\"comment\">- 会将队列中的任务返回</span></span><br><span class=\"line\"><span class=\"comment\">- 并用 interrupt 的方式中断正在执行的任务</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> List&lt;Runnable&gt; <span class=\"title function_\">shutdownNow</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    List&lt;Runnable&gt; tasks;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">ReentrantLock</span> <span class=\"variable\">mainLock</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.mainLock;</span><br><span class=\"line\">    mainLock.lock();</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        checkShutdownAccess();</span><br><span class=\"line\">        <span class=\"comment\">// 修改线程池状态</span></span><br><span class=\"line\">        advanceRunState(STOP);</span><br><span class=\"line\">        <span class=\"comment\">// 打断所有线程</span></span><br><span class=\"line\">        interruptWorkers();</span><br><span class=\"line\">        <span class=\"comment\">// 获取队列中剩余任务</span></span><br><span class=\"line\">        tasks = drainQueue();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        mainLock.unlock();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 尝试终结</span></span><br><span class=\"line\">    tryTerminate();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tasks;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>其它方法</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 不在 RUNNING 状态的线程池，此方法就返回 true</span></span><br><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"title function_\">isShutdown</span><span class=\"params\">()</span>;</span><br><span class=\"line\"><span class=\"comment\">// 线程池状态是否是 TERMINATED</span></span><br><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"title function_\">isTerminated</span><span class=\"params\">()</span>;</span><br><span class=\"line\"><span class=\"comment\">// 调用 shutdown 后，由于调用线程并不会等待所有任务运行结束，因此如果它想在线程池 TERMINATED 后做些事情，可以利用此方法等待</span></span><br><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"title function_\">awaitTermination</span><span class=\"params\">(<span class=\"type\">long</span> timeout, TimeUnit unit)</span> <span class=\"keyword\">throws</span> InterruptedException;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ol>\n<h5 id=\"8-3-最优线程数\"><a href=\"#8-3-最优线程数\" class=\"headerlink\" title=\"8.3 最优线程数\"></a>8.3 最优线程数</h5><blockquote>\n<p>过小会导致程序不能充分地利用系统资源、容易导致饥饿 </p>\n<p>过大会导致更多的线程上下文切换，占用更多内存</p>\n<ol>\n<li><p>CPU 密集型运算</p>\n<blockquote>\n<p>通常采用 cpu 核数 + 1 能够实现最优的 CPU 利用率，+1 是保证当线程由于页缺失故障（操作系统）或其它原因 导致暂停时，额外的这个线程就能顶上去，保证 CPU 时钟周期不被浪费</p>\n</blockquote>\n</li>\n<li><p>I&#x2F;O 密集型运算</p>\n<blockquote>\n<p>CPU 不总是处于繁忙状态，例如，当你执行业务计算时，这时候会使用 CPU 资源，但当你执行 I&#x2F;O 操作时、远程 RPC 调用时，包括进行数据库操作时，这时候 CPU 就闲下来了，你可以利用多线程提高它的利用率。 </p>\n<p>经验公式 <code>线程数 = 核数 * 期望 CPU 利用率 * 总时间(CPU计算时间+等待时间) / CPU 计算时间 </code></p>\n<p>例如</p>\n<p> 4 核 CPU 计算时间是 50% ，其它等待时间是 50%，期望 cpu 被 100% 利用，套用公式 4 * 100% * 100% &#x2F; 50% &#x3D; 8 </p>\n<p> 4 核 CPU 计算时间是 10% ，其它等待时间是 90%，期望 cpu 被 100% 利用，套用公式 4 * 100% * 100% &#x2F; 10% &#x3D; 40</p>\n</blockquote>\n</li>\n</ol>\n</blockquote>\n<h5 id=\"8-4-任务调度线程池\"><a href=\"#8-4-任务调度线程池\" class=\"headerlink\" title=\"8.4 任务调度线程池\"></a>8.4 任务调度线程池</h5><blockquote>\n<p><code>Executors.newScheduledThreadPool</code> 线程数固定，任务数多于线程数时，会放入无界队列排队。任务执行完毕，这些线程也不会被释放。用来执行延迟或反复执行的任务</p>\n<p>Timer 的优点在于简单易用，但由于所有任务都是由同一个线程来调度，因此所有任务都是串行执行的，同一时间只能有一个任务在执行，前一个 任务的延迟或异常都将会影响到之后的任务。</p>\n<ul>\n<li><p>scheduleAtFixedRate</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">ScheduledExecutorService</span> <span class=\"variable\">pool</span> <span class=\"operator\">=</span> Executors.newScheduledThreadPool(<span class=\"number\">1</span>);</span><br><span class=\"line\">log.debug(<span class=\"string\">&quot;start...&quot;</span>);</span><br><span class=\"line\">pool.scheduleAtFixedRate(() -&gt; &#123;</span><br><span class=\"line\">    log.debug(<span class=\"string\">&quot;running...&quot;</span>);</span><br><span class=\"line\">    sleep(<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">1</span>, <span class=\"number\">1</span>, TimeUnit.SECONDS);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>任务执行时间大于间隔时间时，将不间断执行任务</p>\n</blockquote>\n</li>\n<li><p>scheduleWithFixedDelay</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">ScheduledExecutorService</span> <span class=\"variable\">pool</span> <span class=\"operator\">=</span> Executors.newScheduledThreadPool(<span class=\"number\">1</span>);</span><br><span class=\"line\">log.debug(<span class=\"string\">&quot;start...&quot;</span>);</span><br><span class=\"line\">pool.scheduleWithFixedDelay(()-&gt; &#123;</span><br><span class=\"line\">    log.debug(<span class=\"string\">&quot;running...&quot;</span>);</span><br><span class=\"line\">    sleep(<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">1</span>, <span class=\"number\">1</span>, TimeUnit.SECONDS);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>间隔时间从上个任务执行结束开始计算</p>\n</blockquote>\n</li>\n</ul>\n<p>定时任务应用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获得当前时间</span></span><br><span class=\"line\"><span class=\"type\">LocalDateTime</span> <span class=\"variable\">now</span> <span class=\"operator\">=</span> LocalDateTime.now();</span><br><span class=\"line\"><span class=\"comment\">// 获取本周四 18:00:00.000</span></span><br><span class=\"line\"><span class=\"type\">LocalDateTime</span> <span class=\"variable\">thursday</span> <span class=\"operator\">=</span> </span><br><span class=\"line\">    now.with(DayOfWeek.THURSDAY).withHour(<span class=\"number\">18</span>).withMinute(<span class=\"number\">0</span>).withSecond(<span class=\"number\">0</span>).withNano(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"comment\">// 如果当前时间已经超过 本周四 18:00:00.000， 那么找下周四 18:00:00.000</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(now.compareTo(thursday) &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    thursday = thursday.plusWeeks(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 计算时间差，即延时执行时间</span></span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"variable\">initialDelay</span> <span class=\"operator\">=</span> Duration.between(now, thursday).toMillis();</span><br><span class=\"line\"><span class=\"comment\">// 计算间隔时间，即 1 周的毫秒值</span></span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"variable\">oneWeek</span> <span class=\"operator\">=</span> <span class=\"number\">7</span> * <span class=\"number\">24</span> * <span class=\"number\">3600</span> * <span class=\"number\">1000</span>;</span><br><span class=\"line\"><span class=\"type\">ScheduledExecutorService</span> <span class=\"variable\">executor</span> <span class=\"operator\">=</span> Executors.newScheduledThreadPool(<span class=\"number\">2</span>);</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;开始时间：&quot;</span> + <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>());</span><br><span class=\"line\">executor.scheduleAtFixedRate(() -&gt; &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;执行时间：&quot;</span> + <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>());</span><br><span class=\"line\">&#125;, initialDelay, oneWeek, TimeUnit.MILLISECONDS);</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h5 id=\"8-5-Tomcat线程池\"><a href=\"#8-5-Tomcat线程池\" class=\"headerlink\" title=\"8.5 Tomcat线程池\"></a>8.5 Tomcat线程池</h5><p><img src=\"/2023/03/07/JUC/Tomcat-Conector.png\"></p>\n<ul>\n<li>LimitLatch 用来限流，可以控制最大连接个数</li>\n<li>Acceptor 只负责【接收新的 socket 连接】</li>\n<li>Poller 只负责监听 socket channel 是否有【可读的 I&#x2F;O 事件】，一旦可读，封装一个任务对象（socketProcessor），提交给 Executor 线程池处理</li>\n<li>Executor 线程池中的工作线程最终负责【处理请求】</li>\n</ul>\n<ol>\n<li><p>Tomcat 线程池与ThreadPoolExecutor</p>\n<blockquote>\n<p>如果总线程数达到 maximumPoolSize，不会立刻抛 RejectedExecutionException 异常 而是再次尝试将任务放入队列(只进行一次)，如果还失败，才抛出 RejectedExecutionException 异常</p>\n</blockquote>\n</li>\n<li><p>Connector 配置</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">配置项</th>\n<th align=\"center\">默认值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">acceptorThreadCount</td>\n<td align=\"center\">1</td>\n<td>acceptor 线程数量</td>\n</tr>\n<tr>\n<td align=\"left\">pollerThreadCount</td>\n<td align=\"center\">1</td>\n<td>poller 线程数量</td>\n</tr>\n<tr>\n<td align=\"left\">minSpareThread</td>\n<td align=\"center\">10</td>\n<td>核心线程数，即 corePoolSize</td>\n</tr>\n<tr>\n<td align=\"left\">maxThreads</td>\n<td align=\"center\">200</td>\n<td>最大线程数，即 maximumPoolSize</td>\n</tr>\n<tr>\n<td align=\"left\">executor</td>\n<td align=\"center\"></td>\n<td>Executor 名称，用来引用下面的 Executor</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>Executor 线程配置</p>\n<blockquote>\n<p>与ThreadPoolExecutor不一样的创建救急线程方式</p>\n</blockquote>\n<p> <img src=\"/2023/03/07/JUC/Tomcat-%E4%B8%8D%E4%B8%80%E6%A0%B7%E7%9A%84%E6%95%91%E6%80%A5%E7%BA%BF%E7%A8%8B%E5%88%9B%E5%BB%BA.png\"></p>\n</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>配置项</th>\n<th align=\"center\">默认值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>threadPriority</td>\n<td align=\"center\">5</td>\n<td>线程优先级</td>\n</tr>\n<tr>\n<td>daemon</td>\n<td align=\"center\">true</td>\n<td>是否守护线程</td>\n</tr>\n<tr>\n<td>minSpareThreads</td>\n<td align=\"center\">25</td>\n<td>核心线程数，即 corePoolSize</td>\n</tr>\n<tr>\n<td>maxThreads</td>\n<td align=\"center\">200</td>\n<td>最大线程数，即 maximumPoolSize</td>\n</tr>\n<tr>\n<td>maxIdleTime</td>\n<td align=\"center\">60000</td>\n<td>线程生存时间，单位是毫秒，默认值即 1 分钟</td>\n</tr>\n<tr>\n<td>maxQueueSize</td>\n<td align=\"center\"><code>Integer.MAX_VALUE</code></td>\n<td>队列长度</td>\n</tr>\n<tr>\n<td>prestartminSpareThreads</td>\n<td align=\"center\">false</td>\n<td>核心线程是否在服务器启动时启动</td>\n</tr>\n</tbody></table>\n","categories":[],"tags":[]}